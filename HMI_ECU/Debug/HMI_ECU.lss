
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002990  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000f6  008000f6  00002aba  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a2e  00000000  00000000  00005624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007052  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007192  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b79f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 11 	call	0x22e6	; 0x22e6 <main>
      8a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ISR>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

static volatile void (*g_ptr)(uint8)=0;

ISR(USART_RXC_vect){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ISR+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <ISR+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	if(g_ptr!=0){
     b56:	80 91 f6 00 	lds	r24, 0x00F6
     b5a:	90 91 f7 00 	lds	r25, 0x00F7
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	41 f0       	breq	.+16     	; 0xb72 <ISR+0x2c>
		g_ptr(UDR);
     b62:	e0 91 f6 00 	lds	r30, 0x00F6
     b66:	f0 91 f7 00 	lds	r31, 0x00F7
     b6a:	ac e2       	ldi	r26, 0x2C	; 44
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	8c 91       	ld	r24, X
     b70:	09 95       	icall
	}
}
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <UART_init>:

/*
 * initialization for UART Driver
 * set RX interrupt or polling as req
 */
void UART_init(const UART_ConfigType *configuration) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <UART_init+0x6>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <UART_init+0x8>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = 0;
     b90:	eb e2       	ldi	r30, 0x2B	; 43
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	10 82       	st	Z, r1

	/* reduce the divisor of the baud rate divider from 16 to 8 */
	SET_BIT(UCSRA, U2X);
     b96:	ab e2       	ldi	r26, 0x2B	; 43
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	eb e2       	ldi	r30, 0x2B	; 43
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	8c 93       	st	X, r24

	/* set RX interrupt or polling as required */
	MAKE_BIT(UCSRB, RXCIE, configuration->RX_completeInerrupt);
     ba4:	aa e2       	ldi	r26, 0x2A	; 42
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e2       	ldi	r30, 0x2A	; 42
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	28 2f       	mov	r18, r24
     bb0:	2f 77       	andi	r18, 0x7F	; 127
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	80 81       	ld	r24, Z
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	96 95       	lsr	r25
     bbe:	98 2f       	mov	r25, r24
     bc0:	88 27       	eor	r24, r24
     bc2:	97 95       	ror	r25
     bc4:	87 95       	ror	r24
     bc6:	82 2b       	or	r24, r18
     bc8:	8c 93       	st	X, r24

	/* enable rx and tx */
	SET_BIT(UCSRB, RXEN);
     bca:	aa e2       	ldi	r26, 0x2A	; 42
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e2       	ldi	r30, 0x2A	; 42
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 61       	ori	r24, 0x10	; 16
     bd6:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     bd8:	aa e2       	ldi	r26, 0x2A	; 42
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ea e2       	ldi	r30, 0x2A	; 42
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	8c 93       	st	X, r24

	/* set this bit to write into UCSRC */
	SET_BIT(UCSRC, URSEL);
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 68       	ori	r24, 0x80	; 128
     bf2:	8c 93       	st	X, r24

	/* set error parity as required */
	UCSRC = (UCSRC & 0xcf) | (configuration->parity << 4);
     bf4:	a0 e4       	ldi	r26, 0x40	; 64
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e4       	ldi	r30, 0x40	; 64
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	28 2f       	mov	r18, r24
     c00:	2f 7c       	andi	r18, 0xCF	; 207
     c02:	eb 81       	ldd	r30, Y+3	; 0x03
     c04:	fc 81       	ldd	r31, Y+4	; 0x04
     c06:	81 81       	ldd	r24, Z+1	; 0x01
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	82 95       	swap	r24
     c0e:	92 95       	swap	r25
     c10:	90 7f       	andi	r25, 0xF0	; 240
     c12:	98 27       	eor	r25, r24
     c14:	80 7f       	andi	r24, 0xF0	; 240
     c16:	98 27       	eor	r25, r24
     c18:	82 2b       	or	r24, r18
     c1a:	8c 93       	st	X, r24

	/* set stop bit as required */
	MAKE_BIT(UCSRC, USBS, configuration->stop_bit);
     c1c:	a0 e4       	ldi	r26, 0x40	; 64
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e0 e4       	ldi	r30, 0x40	; 64
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	28 2f       	mov	r18, r24
     c28:	27 7f       	andi	r18, 0xF7	; 247
     c2a:	eb 81       	ldd	r30, Y+3	; 0x03
     c2c:	fc 81       	ldd	r31, Y+4	; 0x04
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	82 2b       	or	r24, r18
     c42:	8c 93       	st	X, r24

	/* set data BITs */
	UCSRC = (UCSRC & 0xf9) | ((configuration->bit_data & 3) << 1);
     c44:	a0 e4       	ldi	r26, 0x40	; 64
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	28 2f       	mov	r18, r24
     c50:	29 7f       	andi	r18, 0xF9	; 249
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	83 81       	ldd	r24, Z+3	; 0x03
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	83 70       	andi	r24, 0x03	; 3
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	82 2b       	or	r24, r18
     c66:	8c 93       	st	X, r24

	/* set baud rate as required */
	UBRRL=0;
     c68:	e9 e2       	ldi	r30, 0x29	; 41
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	10 82       	st	Z, r1
	uint16 baudRate = F_CPU / (8UL * configuration->baud_rate) - 1;
     c6e:	eb 81       	ldd	r30, Y+3	; 0x03
     c70:	fc 81       	ldd	r31, Y+4	; 0x04
     c72:	84 81       	ldd	r24, Z+4	; 0x04
     c74:	95 81       	ldd	r25, Z+5	; 0x05
     c76:	cc 01       	movw	r24, r24
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	aa 1f       	adc	r26, r26
     c82:	bb 1f       	adc	r27, r27
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	aa 1f       	adc	r26, r26
     c8a:	bb 1f       	adc	r27, r27
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	aa 1f       	adc	r26, r26
     c92:	bb 1f       	adc	r27, r27
     c94:	9c 01       	movw	r18, r24
     c96:	ad 01       	movw	r20, r26
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	92 e1       	ldi	r25, 0x12	; 18
     c9c:	aa e7       	ldi	r26, 0x7A	; 122
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodsi4>
     ca8:	da 01       	movw	r26, r20
     caa:	c9 01       	movw	r24, r18
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(baudRate&0x00ff);
     cb2:	e9 e2       	ldi	r30, 0x29	; 41
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	80 83       	st	Z, r24
	UBRRH=baudRate>>8;
     cba:	e0 e4       	ldi	r30, 0x40	; 64
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	89 2f       	mov	r24, r25
     cc4:	99 27       	eor	r25, r25
     cc6:	80 83       	st	Z, r24
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <UART_sendByte>:

/*
 * send data using UART serial communication
 */
void UART_sendByte(uint8 data) {
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE));
     ce2:	eb e2       	ldi	r30, 0x2B	; 43
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	80 72       	andi	r24, 0x20	; 32
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	b9 f3       	breq	.-18     	; 0xce2 <UART_sendByte+0xc>
	UDR = data;
     cf4:	ec e2       	ldi	r30, 0x2C	; 44
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	80 83       	st	Z, r24
}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <UART_recieveByte>:

/*
 * recieve data form UART using polling method
 */
uint8 UART_recieveByte() {
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC));
     d0c:	eb e2       	ldi	r30, 0x2B	; 43
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 23       	and	r24, r24
     d14:	dc f7       	brge	.-10     	; 0xd0c <UART_recieveByte+0x8>
	SET_BIT(UCSRA,RXC);
     d16:	ab e2       	ldi	r26, 0x2B	; 43
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e2       	ldi	r30, 0x2B	; 43
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
	return UDR;
     d24:	ec e2       	ldi	r30, 0x2C	; 44
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <UART_sendString>:

/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <UART_sendString+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <UART_sendString+0x24>
	while (*str != '\0') {
		UART_sendByte(*str);
     d40:	e9 81       	ldd	r30, Y+1	; 0x01
     d42:	fa 81       	ldd	r31, Y+2	; 0x02
     d44:	80 81       	ld	r24, Z
     d46:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
		str++;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
	while (*str != '\0') {
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	80 81       	ld	r24, Z
     d5a:	88 23       	and	r24, r24
     d5c:	89 f7       	brne	.-30     	; 0xd40 <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
	UART_sendByte('#');
     d5e:	83 e2       	ldi	r24, 0x23	; 35
     d60:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <UART_recieveString>:

/*
 * recieve string using UART polling msethod
 * warning -> this function should be sync with the sender to avoid overwrite
 */
void UART_recieveString(uint8 *str) {
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <UART_recieveString+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
	do {
		*str = UART_recieveByte();
     d7e:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_recieveByte>
     d82:	e9 81       	ldd	r30, Y+1	; 0x01
     d84:	fa 81       	ldd	r31, Y+2	; 0x02
     d86:	80 83       	st	Z, r24
	} while (*str++ != '#');
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	80 81       	ld	r24, Z
     d8e:	1b 82       	std	Y+3, r1	; 0x03
     d90:	83 32       	cpi	r24, 0x23	; 35
     d92:	11 f0       	breq	.+4      	; 0xd98 <UART_recieveString+0x2a>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 23       	and	r24, r24
     da6:	59 f7       	brne	.-42     	; 0xd7e <UART_recieveString+0x10>
	*(str - 1) = '\0';
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	fc 01       	movw	r30, r24
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	10 82       	st	Z, r1
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <UART_setCallBack>:

/*
 * save the address of callback functiom
 */
void UART_setCallBack(void(*f_ptr)(uint8)){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <UART_setCallBack+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=f_ptr;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	90 93 f7 00 	sts	0x00F7, r25
     dd4:	80 93 f6 00 	sts	0x00F6, r24
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <__vector_7>:



volatile static void (*g_ptr)(void)=NULL;

ISR(TIMER1_COMPA_vect){
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
     e0c:	80 91 f8 00 	lds	r24, 0x00F8
     e10:	90 91 f9 00 	lds	r25, 0x00F9
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	29 f0       	breq	.+10     	; 0xe22 <__vector_7+0x40>
		g_ptr();
     e18:	e0 91 f8 00 	lds	r30, 0x00F8
     e1c:	f0 91 f9 00 	lds	r31, 0x00F9
     e20:	09 95       	icall
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	bf 91       	pop	r27
     e2c:	af 91       	pop	r26
     e2e:	9f 91       	pop	r25
     e30:	8f 91       	pop	r24
     e32:	7f 91       	pop	r23
     e34:	6f 91       	pop	r22
     e36:	5f 91       	pop	r21
     e38:	4f 91       	pop	r20
     e3a:	3f 91       	pop	r19
     e3c:	2f 91       	pop	r18
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <__vector_9>:

ISR(TIMER1_OVF_vect){
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
     e72:	80 91 f8 00 	lds	r24, 0x00F8
     e76:	90 91 f9 00 	lds	r25, 0x00F9
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	29 f0       	breq	.+10     	; 0xe88 <__vector_9+0x40>
		g_ptr();
     e7e:	e0 91 f8 00 	lds	r30, 0x00F8
     e82:	f0 91 f9 00 	lds	r31, 0x00F9
     e86:	09 95       	icall
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <Timer1_init>:

/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <Timer1_init+0x6>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     ebc:	ef e4       	ldi	r30, 0x4F	; 79
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	80 83       	st	Z, r24

	/* clear modes */
	TCCR1B &= ~(3 << WGM12);
     ec4:	ae e4       	ldi	r26, 0x4E	; 78
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ee e4       	ldi	r30, 0x4E	; 78
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	87 7e       	andi	r24, 0xE7	; 231
     ed0:	8c 93       	st	X, r24

	/* required mode ctc or normal mode */
	if (Config_Ptr->mode == TIMER1_CTC) {
     ed2:	e9 81       	ldd	r30, Y+1	; 0x01
     ed4:	fa 81       	ldd	r31, Y+2	; 0x02
     ed6:	85 81       	ldd	r24, Z+5	; 0x05
     ed8:	88 23       	and	r24, r24
     eda:	b9 f4       	brne	.+46     	; 0xf0a <Timer1_init+0x5c>
		OCR1A = Config_Ptr->compare_value;
     edc:	aa e4       	ldi	r26, 0x4A	; 74
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	9c 93       	st	X, r25
     eec:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B, WGM12);
     eee:	ae e4       	ldi	r26, 0x4E	; 78
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ee e4       	ldi	r30, 0x4E	; 78
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
     efc:	a9 e5       	ldi	r26, 0x59	; 89
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e9 e5       	ldi	r30, 0x59	; 89
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	8c 93       	st	X, r24
	}
	/* set the initial counter for timer */
	TCNT1 = Config_Ptr->initial_value;
     f0a:	ac e4       	ldi	r26, 0x4C	; 76
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 81       	ldd	r30, Y+1	; 0x01
     f10:	fa 81       	ldd	r31, Y+2	; 0x02
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24

	/* configure timer 1 prescaler and start it  */
	TCCR1B = (TCCR1B & 0xf8) | (Config_Ptr->prescaler);
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	98 2f       	mov	r25, r24
     f28:	98 7f       	andi	r25, 0xF8	; 248
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	fa 81       	ldd	r31, Y+2	; 0x02
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	89 2b       	or	r24, r25
     f32:	8c 93       	st	X, r24

}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void){
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     f46:	ef e4       	ldi	r30, 0x4F	; 79
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	10 82       	st	Z, r1
	TCCR1B &= ~(3 << WGM12);
     f4c:	ae e4       	ldi	r26, 0x4E	; 78
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	ee e4       	ldi	r30, 0x4E	; 78
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	87 7e       	andi	r24, 0xE7	; 231
     f58:	8c 93       	st	X, r24
	TCCR1B &= 0xf8;
     f5a:	ae e4       	ldi	r26, 0x4E	; 78
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ee e4       	ldi	r30, 0x4E	; 78
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 7f       	andi	r24, 0xF8	; 248
     f66:	8c 93       	st	X, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <Timer1_setCallBack+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	90 93 f9 00 	sts	0x00F9, r25
     f84:	80 93 f8 00 	sts	0x00F8, r24
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* send data to lcd */
void LCD_init(void){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	2e 97       	sbiw	r28, 0x0e	; 14
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);	/* configure Rs as output pin */
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	62 e0       	ldi	r22, 0x02	; 2
     faa:	41 e0       	ldi	r20, 0x01	; 1
     fac:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);	/* configure E as output pin */
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	63 e0       	ldi	r22, 0x03	; 3
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>

	/* INIT the mode of LCD & configure the output pins */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PIN_OUTPUT);
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	0e 94 a6 10 	call	0x214c	; 0x214c <GPIO_setupPortDirection>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 ea       	ldi	r26, 0xA0	; 160
     fc8:	b1 e4       	ldi	r27, 0x41	; 65
     fca:	8b 87       	std	Y+11, r24	; 0x0b
     fcc:	9c 87       	std	Y+12, r25	; 0x0c
     fce:	ad 87       	std	Y+13, r26	; 0x0d
     fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	4a ef       	ldi	r20, 0xFA	; 250
     fe0:	54 e4       	ldi	r21, 0x44	; 68
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8f 83       	std	Y+7, r24	; 0x07
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	a9 87       	std	Y+9, r26	; 0x09
     ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1006:	88 23       	and	r24, r24
    1008:	2c f4       	brge	.+10     	; 0x1014 <LCD_init+0x82>
		__ticks = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <LCD_init+0x100>
	else if (__tmp > 65535)
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1028:	18 16       	cp	r1, r24
    102a:	4c f5       	brge	.+82     	; 0x107e <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <LCD_init+0xe2>
    1056:	88 ec       	ldi	r24, 0xC8	; 200
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <LCD_init+0xd0>
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	69 f7       	brne	.-38     	; 0x1056 <LCD_init+0xc4>
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <LCD_init+0x10c>
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
#endif
	_delay_ms(20); 		  										/* LCD Power ON delay always > 15ms */
	LCD_sendCommand(LCD_MODE);									/* 2-lines + 8bit mode OR 2-lines +4bit mode */
    10a6:	88 e3       	ldi	r24, 0x38	; 56
    10a8:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);							/* clear screen */
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);							/* cursor off */
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_sendCommand>
}
    10b8:	2e 96       	adiw	r28, 0x0e	; 14
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <LCD_sendCommand>:

/* send commands to lcd */
void LCD_sendCommand(uint8 command){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	e9 97       	sbiw	r28, 0x39	; 57
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* RS=0 send command mode */
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8d ab       	std	Y+53, r24	; 0x35
    10f4:	9e ab       	std	Y+54, r25	; 0x36
    10f6:	af ab       	std	Y+55, r26	; 0x37
    10f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6d a9       	ldd	r22, Y+53	; 0x35
    10fc:	7e a9       	ldd	r23, Y+54	; 0x36
    10fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1100:	98 ad       	ldd	r25, Y+56	; 0x38
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	89 ab       	std	Y+49, r24	; 0x31
    1114:	9a ab       	std	Y+50, r25	; 0x32
    1116:	ab ab       	std	Y+51, r26	; 0x33
    1118:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    111a:	69 a9       	ldd	r22, Y+49	; 0x31
    111c:	7a a9       	ldd	r23, Y+50	; 0x32
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	9c a9       	ldd	r25, Y+52	; 0x34
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <LCD_sendCommand+0x72>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	98 ab       	std	Y+48, r25	; 0x30
    1138:	8f a7       	std	Y+47, r24	; 0x2f
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    113c:	69 a9       	ldd	r22, Y+49	; 0x31
    113e:	7a a9       	ldd	r23, Y+50	; 0x32
    1140:	8b a9       	ldd	r24, Y+51	; 0x33
    1142:	9c a9       	ldd	r25, Y+52	; 0x34
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6d a9       	ldd	r22, Y+53	; 0x35
    1156:	7e a9       	ldd	r23, Y+54	; 0x36
    1158:	8f a9       	ldd	r24, Y+55	; 0x37
    115a:	98 ad       	ldd	r25, Y+56	; 0x38
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	98 ab       	std	Y+48, r25	; 0x30
    117a:	8f a7       	std	Y+47, r24	; 0x2f
    117c:	0f c0       	rjmp	.+30     	; 0x119c <LCD_sendCommand+0xd2>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e a7       	std	Y+46, r25	; 0x2e
    1184:	8d a7       	std	Y+45, r24	; 0x2d
    1186:	8d a5       	ldd	r24, Y+45	; 0x2d
    1188:	9e a5       	ldd	r25, Y+46	; 0x2e
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <LCD_sendCommand+0xc0>
    118e:	9e a7       	std	Y+46, r25	; 0x2e
    1190:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8f a5       	ldd	r24, Y+47	; 0x2f
    1194:	98 a9       	ldd	r25, Y+48	; 0x30
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8f a5       	ldd	r24, Y+47	; 0x2f
    119e:	98 a9       	ldd	r25, Y+48	; 0x30
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <LCD_sendCommand+0xb4>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	69 a9       	ldd	r22, Y+49	; 0x31
    11a8:	7a a9       	ldd	r23, Y+50	; 0x32
    11aa:	8b a9       	ldd	r24, Y+51	; 0x33
    11ac:	9c a9       	ldd	r25, Y+52	; 0x34
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	98 ab       	std	Y+48, r25	; 0x30
    11b8:	8f a7       	std	Y+47, r24	; 0x2f
    11ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    11bc:	98 a9       	ldd	r25, Y+48	; 0x30
    11be:	9c a7       	std	Y+44, r25	; 0x2c
    11c0:	8b a7       	std	Y+43, r24	; 0x2b
    11c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <LCD_sendCommand+0xfc>
    11ca:	9c a7       	std	Y+44, r25	; 0x2c
    11cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); 												/* Tas delay */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* E=1 from datasheet */
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	63 e0       	ldi	r22, 0x03	; 3
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a0 e8       	ldi	r26, 0x80	; 128
    11de:	bf e3       	ldi	r27, 0x3F	; 63
    11e0:	8f a3       	std	Y+39, r24	; 0x27
    11e2:	98 a7       	std	Y+40, r25	; 0x28
    11e4:	a9 a7       	std	Y+41, r26	; 0x29
    11e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6f a1       	ldd	r22, Y+39	; 0x27
    11ea:	78 a5       	ldd	r23, Y+40	; 0x28
    11ec:	89 a5       	ldd	r24, Y+41	; 0x29
    11ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8b a3       	std	Y+35, r24	; 0x23
    1202:	9c a3       	std	Y+36, r25	; 0x24
    1204:	ad a3       	std	Y+37, r26	; 0x25
    1206:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1208:	6b a1       	ldd	r22, Y+35	; 0x23
    120a:	7c a1       	ldd	r23, Y+36	; 0x24
    120c:	8d a1       	ldd	r24, Y+37	; 0x25
    120e:	9e a1       	ldd	r25, Y+38	; 0x26
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <LCD_sendCommand+0x160>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9a a3       	std	Y+34, r25	; 0x22
    1226:	89 a3       	std	Y+33, r24	; 0x21
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    122a:	6b a1       	ldd	r22, Y+35	; 0x23
    122c:	7c a1       	ldd	r23, Y+36	; 0x24
    122e:	8d a1       	ldd	r24, Y+37	; 0x25
    1230:	9e a1       	ldd	r25, Y+38	; 0x26
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6f a1       	ldd	r22, Y+39	; 0x27
    1244:	78 a5       	ldd	r23, Y+40	; 0x28
    1246:	89 a5       	ldd	r24, Y+41	; 0x29
    1248:	9a a5       	ldd	r25, Y+42	; 0x2a
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	0f c0       	rjmp	.+30     	; 0x128a <LCD_sendCommand+0x1c0>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	98 a3       	std	Y+32, r25	; 0x20
    1272:	8f 8f       	std	Y+31, r24	; 0x1f
    1274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1276:	98 a1       	ldd	r25, Y+32	; 0x20
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <LCD_sendCommand+0x1ae>
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	89 a1       	ldd	r24, Y+33	; 0x21
    1282:	9a a1       	ldd	r25, Y+34	; 0x22
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9a a3       	std	Y+34, r25	; 0x22
    1288:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	89 a1       	ldd	r24, Y+33	; 0x21
    128c:	9a a1       	ldd	r25, Y+34	; 0x22
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <LCD_sendCommand+0x1a2>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	6b a1       	ldd	r22, Y+35	; 0x23
    1296:	7c a1       	ldd	r23, Y+36	; 0x24
    1298:	8d a1       	ldd	r24, Y+37	; 0x25
    129a:	9e a1       	ldd	r25, Y+38	; 0x26
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9a a3       	std	Y+34, r25	; 0x22
    12a6:	89 a3       	std	Y+33, r24	; 0x21
    12a8:	89 a1       	ldd	r24, Y+33	; 0x21
    12aa:	9a a1       	ldd	r25, Y+34	; 0x22
    12ac:	9e 8f       	std	Y+30, r25	; 0x1e
    12ae:	8d 8f       	std	Y+29, r24	; 0x1d
    12b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <LCD_sendCommand+0x1ea>
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); 												/* Tpw-Tdsw delay */

	/* send command using two modes */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	69 ad       	ldd	r22, Y+57	; 0x39
    12c0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <GPIO_writePort>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 e8       	ldi	r26, 0x80	; 128
    12ca:	bf e3       	ldi	r27, 0x3F	; 63
    12cc:	89 8f       	std	Y+25, r24	; 0x19
    12ce:	9a 8f       	std	Y+26, r25	; 0x1a
    12d0:	ab 8f       	std	Y+27, r26	; 0x1b
    12d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	69 8d       	ldd	r22, Y+25	; 0x19
    12d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4a ef       	ldi	r20, 0xFA	; 250
    12e2:	54 e4       	ldi	r21, 0x44	; 68
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	8d 8b       	std	Y+21, r24	; 0x15
    12ee:	9e 8b       	std	Y+22, r25	; 0x16
    12f0:	af 8b       	std	Y+23, r26	; 0x17
    12f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12f4:	6d 89       	ldd	r22, Y+21	; 0x15
    12f6:	7e 89       	ldd	r23, Y+22	; 0x16
    12f8:	8f 89       	ldd	r24, Y+23	; 0x17
    12fa:	98 8d       	ldd	r25, Y+24	; 0x18
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <LCD_sendCommand+0x24c>
		__ticks = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 8b       	std	Y+20, r25	; 0x14
    1312:	8b 8b       	std	Y+19, r24	; 0x13
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1316:	6d 89       	ldd	r22, Y+21	; 0x15
    1318:	7e 89       	ldd	r23, Y+22	; 0x16
    131a:	8f 89       	ldd	r24, Y+23	; 0x17
    131c:	98 8d       	ldd	r25, Y+24	; 0x18
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	3f ef       	ldi	r19, 0xFF	; 255
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	57 e4       	ldi	r21, 0x47	; 71
    1326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	4c f5       	brge	.+82     	; 0x1380 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132e:	69 8d       	ldd	r22, Y+25	; 0x19
    1330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e2       	ldi	r20, 0x20	; 32
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9c 8b       	std	Y+20, r25	; 0x14
    1354:	8b 8b       	std	Y+19, r24	; 0x13
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <LCD_sendCommand+0x2ac>
    1358:	88 ec       	ldi	r24, 0xC8	; 200
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9a 8b       	std	Y+18, r25	; 0x12
    135e:	89 8b       	std	Y+17, r24	; 0x11
    1360:	89 89       	ldd	r24, Y+17	; 0x11
    1362:	9a 89       	ldd	r25, Y+18	; 0x12
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <LCD_sendCommand+0x29a>
    1368:	9a 8b       	std	Y+18, r25	; 0x12
    136a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	9c 89       	ldd	r25, Y+20	; 0x14
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9c 8b       	std	Y+20, r25	; 0x14
    1374:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	9c 89       	ldd	r25, Y+20	; 0x14
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f7       	brne	.-38     	; 0x1358 <LCD_sendCommand+0x28e>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1380:	6d 89       	ldd	r22, Y+21	; 0x15
    1382:	7e 89       	ldd	r23, Y+22	; 0x16
    1384:	8f 89       	ldd	r24, Y+23	; 0x17
    1386:	98 8d       	ldd	r25, Y+24	; 0x18
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9c 8b       	std	Y+20, r25	; 0x14
    1392:	8b 8b       	std	Y+19, r24	; 0x13
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	9c 89       	ldd	r25, Y+20	; 0x14
    1398:	98 8b       	std	Y+16, r25	; 0x10
    139a:	8f 87       	std	Y+15, r24	; 0x0f
    139c:	8f 85       	ldd	r24, Y+15	; 0x0f
    139e:	98 89       	ldd	r25, Y+16	; 0x10
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD_sendCommand+0x2d6>
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+5, GET_BIT(command, 1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+6, GET_BIT(command, 2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+7, GET_BIT(command, 3));
#endif
	_delay_ms(1); 												/* Tdsw */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* E=0 from datasheet */
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	63 e0       	ldi	r22, 0x03	; 3
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e8       	ldi	r26, 0x80	; 128
    13b8:	bf e3       	ldi	r27, 0x3F	; 63
    13ba:	8b 87       	std	Y+11, r24	; 0x0b
    13bc:	9c 87       	std	Y+12, r25	; 0x0c
    13be:	ad 87       	std	Y+13, r26	; 0x0d
    13c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a ef       	ldi	r20, 0xFA	; 250
    13d0:	54 e4       	ldi	r21, 0x44	; 68
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8f 83       	std	Y+7, r24	; 0x07
    13dc:	98 87       	std	Y+8, r25	; 0x08
    13de:	a9 87       	std	Y+9, r26	; 0x09
    13e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <LCD_sendCommand+0x33a>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1404:	6f 81       	ldd	r22, Y+7	; 0x07
    1406:	78 85       	ldd	r23, Y+8	; 0x08
    1408:	89 85       	ldd	r24, Y+9	; 0x09
    140a:	9a 85       	ldd	r25, Y+10	; 0x0a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	6b 85       	ldd	r22, Y+11	; 0x0b
    141e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1420:	8d 85       	ldd	r24, Y+13	; 0x0d
    1422:	9e 85       	ldd	r25, Y+14	; 0x0e
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <LCD_sendCommand+0x39a>
    1446:	88 ec       	ldi	r24, 0xC8	; 200
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_sendCommand+0x388>
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <LCD_sendCommand+0x37c>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9e 83       	std	Y+6, r25	; 0x06
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <LCD_sendCommand+0x3c4>
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); 												/* Th */
}
    1496:	e9 96       	adiw	r28, 0x39	; 57
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <LCD_displayCharacter>:

/* send data to lcd */
void LCD_displayCharacter(char data){
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	e9 97       	sbiw	r28, 0x39	; 57
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* RS=1 send data mode */
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	62 e0       	ldi	r22, 0x02	; 2
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e8       	ldi	r26, 0x80	; 128
    14ce:	bf e3       	ldi	r27, 0x3F	; 63
    14d0:	8d ab       	std	Y+53, r24	; 0x35
    14d2:	9e ab       	std	Y+54, r25	; 0x36
    14d4:	af ab       	std	Y+55, r26	; 0x37
    14d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d8:	6d a9       	ldd	r22, Y+53	; 0x35
    14da:	7e a9       	ldd	r23, Y+54	; 0x36
    14dc:	8f a9       	ldd	r24, Y+55	; 0x37
    14de:	98 ad       	ldd	r25, Y+56	; 0x38
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a ef       	ldi	r20, 0xFA	; 250
    14e6:	54 e4       	ldi	r21, 0x44	; 68
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	89 ab       	std	Y+49, r24	; 0x31
    14f2:	9a ab       	std	Y+50, r25	; 0x32
    14f4:	ab ab       	std	Y+51, r26	; 0x33
    14f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14f8:	69 a9       	ldd	r22, Y+49	; 0x31
    14fa:	7a a9       	ldd	r23, Y+50	; 0x32
    14fc:	8b a9       	ldd	r24, Y+51	; 0x33
    14fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	2c f4       	brge	.+10     	; 0x151a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	98 ab       	std	Y+48, r25	; 0x30
    1516:	8f a7       	std	Y+47, r24	; 0x2f
    1518:	3f c0       	rjmp	.+126    	; 0x1598 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    151a:	69 a9       	ldd	r22, Y+49	; 0x31
    151c:	7a a9       	ldd	r23, Y+50	; 0x32
    151e:	8b a9       	ldd	r24, Y+51	; 0x33
    1520:	9c a9       	ldd	r25, Y+52	; 0x34
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	4c f5       	brge	.+82     	; 0x1584 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	6d a9       	ldd	r22, Y+53	; 0x35
    1534:	7e a9       	ldd	r23, Y+54	; 0x36
    1536:	8f a9       	ldd	r24, Y+55	; 0x37
    1538:	98 ad       	ldd	r25, Y+56	; 0x38
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	98 ab       	std	Y+48, r25	; 0x30
    1558:	8f a7       	std	Y+47, r24	; 0x2f
    155a:	0f c0       	rjmp	.+30     	; 0x157a <LCD_displayCharacter+0xd2>
    155c:	88 ec       	ldi	r24, 0xC8	; 200
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9e a7       	std	Y+46, r25	; 0x2e
    1562:	8d a7       	std	Y+45, r24	; 0x2d
    1564:	8d a5       	ldd	r24, Y+45	; 0x2d
    1566:	9e a5       	ldd	r25, Y+46	; 0x2e
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <LCD_displayCharacter+0xc0>
    156c:	9e a7       	std	Y+46, r25	; 0x2e
    156e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1570:	8f a5       	ldd	r24, Y+47	; 0x2f
    1572:	98 a9       	ldd	r25, Y+48	; 0x30
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	98 ab       	std	Y+48, r25	; 0x30
    1578:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	8f a5       	ldd	r24, Y+47	; 0x2f
    157c:	98 a9       	ldd	r25, Y+48	; 0x30
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <LCD_displayCharacter+0xb4>
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	69 a9       	ldd	r22, Y+49	; 0x31
    1586:	7a a9       	ldd	r23, Y+50	; 0x32
    1588:	8b a9       	ldd	r24, Y+51	; 0x33
    158a:	9c a9       	ldd	r25, Y+52	; 0x34
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
    1598:	8f a5       	ldd	r24, Y+47	; 0x2f
    159a:	98 a9       	ldd	r25, Y+48	; 0x30
    159c:	9c a7       	std	Y+44, r25	; 0x2c
    159e:	8b a7       	std	Y+43, r24	; 0x2b
    15a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCD_displayCharacter+0xfc>
    15a8:	9c a7       	std	Y+44, r25	; 0x2c
    15aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); 												/* Tas delay */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* E=1 from datasheet */
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	63 e0       	ldi	r22, 0x03	; 3
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e8       	ldi	r26, 0x80	; 128
    15bc:	bf e3       	ldi	r27, 0x3F	; 63
    15be:	8f a3       	std	Y+39, r24	; 0x27
    15c0:	98 a7       	std	Y+40, r25	; 0x28
    15c2:	a9 a7       	std	Y+41, r26	; 0x29
    15c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6f a1       	ldd	r22, Y+39	; 0x27
    15c8:	78 a5       	ldd	r23, Y+40	; 0x28
    15ca:	89 a5       	ldd	r24, Y+41	; 0x29
    15cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8b a3       	std	Y+35, r24	; 0x23
    15e0:	9c a3       	std	Y+36, r25	; 0x24
    15e2:	ad a3       	std	Y+37, r26	; 0x25
    15e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15e6:	6b a1       	ldd	r22, Y+35	; 0x23
    15e8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ea:	8d a1       	ldd	r24, Y+37	; 0x25
    15ec:	9e a1       	ldd	r25, Y+38	; 0x26
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <LCD_displayCharacter+0x160>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9a a3       	std	Y+34, r25	; 0x22
    1604:	89 a3       	std	Y+33, r24	; 0x21
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1608:	6b a1       	ldd	r22, Y+35	; 0x23
    160a:	7c a1       	ldd	r23, Y+36	; 0x24
    160c:	8d a1       	ldd	r24, Y+37	; 0x25
    160e:	9e a1       	ldd	r25, Y+38	; 0x26
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6f a1       	ldd	r22, Y+39	; 0x27
    1622:	78 a5       	ldd	r23, Y+40	; 0x28
    1624:	89 a5       	ldd	r24, Y+41	; 0x29
    1626:	9a a5       	ldd	r25, Y+42	; 0x2a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9a a3       	std	Y+34, r25	; 0x22
    1646:	89 a3       	std	Y+33, r24	; 0x21
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <LCD_displayCharacter+0x1c0>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	98 a3       	std	Y+32, r25	; 0x20
    1650:	8f 8f       	std	Y+31, r24	; 0x1f
    1652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1654:	98 a1       	ldd	r25, Y+32	; 0x20
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_displayCharacter+0x1ae>
    165a:	98 a3       	std	Y+32, r25	; 0x20
    165c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9a a3       	std	Y+34, r25	; 0x22
    1666:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	89 a1       	ldd	r24, Y+33	; 0x21
    166a:	9a a1       	ldd	r25, Y+34	; 0x22
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <LCD_displayCharacter+0x1a2>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6b a1       	ldd	r22, Y+35	; 0x23
    1674:	7c a1       	ldd	r23, Y+36	; 0x24
    1676:	8d a1       	ldd	r24, Y+37	; 0x25
    1678:	9e a1       	ldd	r25, Y+38	; 0x26
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9a a3       	std	Y+34, r25	; 0x22
    1684:	89 a3       	std	Y+33, r24	; 0x21
    1686:	89 a1       	ldd	r24, Y+33	; 0x21
    1688:	9a a1       	ldd	r25, Y+34	; 0x22
    168a:	9e 8f       	std	Y+30, r25	; 0x1e
    168c:	8d 8f       	std	Y+29, r24	; 0x1d
    168e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1690:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_displayCharacter+0x1ea>
    1696:	9e 8f       	std	Y+30, r25	; 0x1e
    1698:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); 												/* Tpw-Tdsw delay */

	/* send command using two modes */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	69 ad       	ldd	r22, Y+57	; 0x39
    169e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <GPIO_writePort>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e8       	ldi	r26, 0x80	; 128
    16a8:	bf e3       	ldi	r27, 0x3F	; 63
    16aa:	89 8f       	std	Y+25, r24	; 0x19
    16ac:	9a 8f       	std	Y+26, r25	; 0x1a
    16ae:	ab 8f       	std	Y+27, r26	; 0x1b
    16b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	69 8d       	ldd	r22, Y+25	; 0x19
    16b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8d 8b       	std	Y+21, r24	; 0x15
    16cc:	9e 8b       	std	Y+22, r25	; 0x16
    16ce:	af 8b       	std	Y+23, r26	; 0x17
    16d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 8b       	std	Y+20, r25	; 0x14
    16f0:	8b 8b       	std	Y+19, r24	; 0x13
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    16f4:	6d 89       	ldd	r22, Y+21	; 0x15
    16f6:	7e 89       	ldd	r23, Y+22	; 0x16
    16f8:	8f 89       	ldd	r24, Y+23	; 0x17
    16fa:	98 8d       	ldd	r25, Y+24	; 0x18
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <LCD_displayCharacter+0x2ac>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9a 8b       	std	Y+18, r25	; 0x12
    173c:	89 8b       	std	Y+17, r24	; 0x11
    173e:	89 89       	ldd	r24, Y+17	; 0x11
    1740:	9a 89       	ldd	r25, Y+18	; 0x12
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_displayCharacter+0x29a>
    1746:	9a 8b       	std	Y+18, r25	; 0x12
    1748:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	9c 89       	ldd	r25, Y+20	; 0x14
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <LCD_displayCharacter+0x28e>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6d 89       	ldd	r22, Y+21	; 0x15
    1760:	7e 89       	ldd	r23, Y+22	; 0x16
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	98 8d       	ldd	r25, Y+24	; 0x18
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9c 8b       	std	Y+20, r25	; 0x14
    1770:	8b 8b       	std	Y+19, r24	; 0x13
    1772:	8b 89       	ldd	r24, Y+19	; 0x13
    1774:	9c 89       	ldd	r25, Y+20	; 0x14
    1776:	98 8b       	std	Y+16, r25	; 0x10
    1778:	8f 87       	std	Y+15, r24	; 0x0f
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
    177c:	98 89       	ldd	r25, Y+16	; 0x10
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_displayCharacter+0x2d6>
    1782:	98 8b       	std	Y+16, r25	; 0x10
    1784:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+5, GET_BIT(data, 1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+6, GET_BIT(data, 2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+7, GET_BIT(data, 3));
#endif
	_delay_ms(1); 												/* Tdsw */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* E=0 from datasheet */
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	63 e0       	ldi	r22, 0x03	; 3
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e8       	ldi	r26, 0x80	; 128
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_displayCharacter+0x39a>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_displayCharacter+0x388>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <LCD_displayCharacter+0x37c>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_displayCharacter+0x3c4>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); 												/* Th */
}
    1874:	e9 96       	adiw	r28, 0x39	; 57
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <LCD_displayString>:



/* write string */
void LCD_displayString(const char *str_ptr){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <LCD_displayString+0x6>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <LCD_displayString+0x24>
	while(*str_ptr != '\0'){
		LCD_displayCharacter(*str_ptr);
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	80 81       	ld	r24, Z
    189c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <LCD_displayCharacter>
		str_ptr++;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01



/* write string */
void LCD_displayString(const char *str_ptr){
	while(*str_ptr != '\0'){
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	80 81       	ld	r24, Z
    18b0:	88 23       	and	r24, r24
    18b2:	89 f7       	brne	.-30     	; 0x1896 <LCD_displayString+0x10>
		LCD_displayCharacter(*str_ptr);
		str_ptr++;
	}
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <LCD_moveCursor>:

/* move cursor base 0 */
void LCD_moveCursor(uint8 row, uint8 col){
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <LCD_moveCursor+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <LCD_moveCursor+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;
	switch(row){
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	c1 f0       	breq	.+48     	; 0x1914 <LCD_moveCursor+0x56>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <LCD_moveCursor+0x3a>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	61 f0       	breq	.+24     	; 0x190e <LCD_moveCursor+0x50>
    18f6:	19 c0       	rjmp	.+50     	; 0x192a <LCD_moveCursor+0x6c>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	69 f0       	breq	.+26     	; 0x191c <LCD_moveCursor+0x5e>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	91 05       	cpc	r25, r1
    190a:	61 f0       	breq	.+24     	; 0x1924 <LCD_moveCursor+0x66>
    190c:	0e c0       	rjmp	.+28     	; 0x192a <LCD_moveCursor+0x6c>
	case 0:
		location=0x00+col;
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	0b c0       	rjmp	.+22     	; 0x192a <LCD_moveCursor+0x6c>
		break;
	case 1:
		location=0x40+col;
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	80 5c       	subi	r24, 0xC0	; 192
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	07 c0       	rjmp	.+14     	; 0x192a <LCD_moveCursor+0x6c>
		break;
	case 2:
		location=0x10+col;
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	80 5f       	subi	r24, 0xF0	; 240
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	03 c0       	rjmp	.+6      	; 0x192a <LCD_moveCursor+0x6c>
		break;
	case 3:
		location=0x50+col;
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	80 5b       	subi	r24, 0xB0	; 176
    1928:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	LCD_sendCommand(location|LCD_FORCE_CURSOR);
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	80 68       	ori	r24, 0x80	; 128
    192e:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_sendCommand>
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <LCD_displayStringRowColumn>:

/* print string in specific location */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char* str_ptr){
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_displayStringRowColumn+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <LCD_displayStringRowColumn+0x8>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	6a 83       	std	Y+2, r22	; 0x02
    1952:	5c 83       	std	Y+4, r21	; 0x04
    1954:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	6a 81       	ldd	r22, Y+2	; 0x02
    195a:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString(str_ptr);
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <LCD_clearScreen>:

/* clear lcd screen */
void LCD_clearScreen(void){
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_sendCommand>
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <LCD_intgerToString>:

/* display integer number on lcd */
void LCD_intgerToString(uint16 number){
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	64 97       	sbiw	r28, 0x14	; 20
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
	char buff[18];
	itoa(number, buff, 10);
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	9e 01       	movw	r18, r28
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	b9 01       	movw	r22, r18
    19ac:	4a e0       	ldi	r20, 0x0A	; 10
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	0e 94 81 14 	call	0x2902	; 0x2902 <itoa>
	LCD_displayString(buff);
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
}
    19bc:	64 96       	adiw	r28, 0x14	; 20
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <KEYPAD_init>:

/*******************************************************************************
 *                      Functions Prototypes                        *
 *******************************************************************************/
/* configure all pins as input */
static void KEYPAD_init(void) {
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <KEYPAD_init+0x6>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	int i;
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	6f ef       	ldi	r22, 0xFF	; 255
    19dc:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <GPIO_writePort>
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    19e0:	1a 82       	std	Y+2, r1	; 0x02
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	0b c0       	rjmp	.+22     	; 0x19fc <KEYPAD_init+0x2e>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
    19e6:	99 81       	ldd	r25, Y+1	; 0x01
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	69 2f       	mov	r22, r25
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>
/* configure all pins as input */
static void KEYPAD_init(void) {
	int i;
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	91 05       	cpc	r25, r1
    1a04:	84 f3       	brlt	.-32     	; 0x19e6 <KEYPAD_init+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    1a06:	1a 82       	std	Y+2, r1	; 0x02
    1a08:	19 82       	std	Y+1, r1	; 0x01
    1a0a:	0d c0       	rjmp	.+26     	; 0x1a26 <KEYPAD_init+0x58>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+i, PIN_INPUT);
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	98 2f       	mov	r25, r24
    1a10:	9c 5f       	subi	r25, 0xFC	; 252
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	69 2f       	mov	r22, r25
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	74 f3       	brlt	.-36     	; 0x1a0c <KEYPAD_init+0x3e>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+i, PIN_INPUT);
	}
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <KEYPAD_4x4_adjustKeyNumber>:
#endif

/* adjust key numbers for 4x3 keypad */
#if KEYPAD_COLUMN_NUMBER==4
#ifndef KEYPAD_STANDARD
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 number_pressed){
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if (number_pressed % 4 == 0) {
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	83 70       	andi	r24, 0x03	; 3
    1a4e:	90 70       	andi	r25, 0x00	; 0
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	a9 f4       	brne	.+42     	; 0x1a7e <KEYPAD_4x4_adjustKeyNumber+0x44>
		if (number_pressed == 4) {
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <KEYPAD_4x4_adjustKeyNumber+0x26>
			value = '/';
    1a5a:	8f e2       	ldi	r24, 0x2F	; 47
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	35 c0       	rjmp	.+106    	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else if (number_pressed == 8) {
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <KEYPAD_4x4_adjustKeyNumber+0x32>
			value = '*';
    1a66:	8a e2       	ldi	r24, 0x2A	; 42
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	2f c0       	rjmp	.+94     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else if (number_pressed == 12) {
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	8c 30       	cpi	r24, 0x0C	; 12
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <KEYPAD_4x4_adjustKeyNumber+0x3e>
			value = '-';
    1a72:	8d e2       	ldi	r24, 0x2D	; 45
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	29 c0       	rjmp	.+82     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else {
			value = '+';
    1a78:	8b e2       	ldi	r24, 0x2B	; 43
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	26 c0       	rjmp	.+76     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
		}
	} else if (number_pressed == 13) {
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	8d 30       	cpi	r24, 0x0D	; 13
    1a82:	19 f4       	brne	.+6      	; 0x1a8a <KEYPAD_4x4_adjustKeyNumber+0x50>
		value = 'C';
    1a84:	83 e4       	ldi	r24, 0x43	; 67
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	20 c0       	rjmp	.+64     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else if (number_pressed == 14) {
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	8e 30       	cpi	r24, 0x0E	; 14
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <KEYPAD_4x4_adjustKeyNumber+0x5a>
		value = 0;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	1b c0       	rjmp	.+54     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else if (number_pressed == 15) {
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	8f 30       	cpi	r24, 0x0F	; 15
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0x66>
		value = '=';
    1a9a:	8d e3       	ldi	r24, 0x3D	; 61
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	15 c0       	rjmp	.+42     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else {
		value = (2 - (number_pressed / 4)) * 3 + number_pressed % 4;
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	86 95       	lsr	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	ac 01       	movw	r20, r24
    1ab0:	42 1b       	sub	r20, r18
    1ab2:	53 0b       	sbc	r21, r19
    1ab4:	9a 01       	movw	r18, r20
    1ab6:	c9 01       	movw	r24, r18
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	82 0f       	add	r24, r18
    1abe:	93 1f       	adc	r25, r19
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	83 70       	andi	r24, 0x03	; 3
    1ac6:	89 0f       	add	r24, r25
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <KEYPAD_getPressedKey>:
#endif
#endif

/* get the keypad button pressed */
uint8 KEYPAD_getPressedKey(void) {
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	62 97       	sbiw	r28, 0x12	; 18
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
	int row, col;
	KEYPAD_init();
    1aea:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <KEYPAD_init>
	while (1) {
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {
    1aee:	1a 8a       	std	Y+18, r1	; 0x12
    1af0:	19 8a       	std	Y+17, r1	; 0x11
    1af2:	b4 c0       	rjmp	.+360    	; 0x1c5c <KEYPAD_getPressedKey+0x186>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
    1af4:	99 89       	ldd	r25, Y+17	; 0x11
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	69 2f       	mov	r22, r25
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_PRESSED_LOGIC);
    1b00:	99 89       	ldd	r25, Y+17	; 0x11
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	69 2f       	mov	r22, r25
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <GPIO_writePin>

			for (col = 0; col < KEYPAD_COLUMN_NUMBER; col++) {
    1b0c:	18 8a       	std	Y+16, r1	; 0x10
    1b0e:	1f 86       	std	Y+15, r1	; 0x0f
    1b10:	23 c0       	rjmp	.+70     	; 0x1b58 <KEYPAD_getPressedKey+0x82>
				if(GPIO_readPin(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+col)==KEYPAD_PRESSED_LOGIC){
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	98 2f       	mov	r25, r24
    1b16:	9c 5f       	subi	r25, 0xFC	; 252
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	69 2f       	mov	r22, r25
    1b1c:	0e 94 0b 10 	call	0x2016	; 0x2016 <GPIO_readPin>
    1b20:	88 23       	and	r24, r24
    1b22:	a9 f4       	brne	.+42     	; 0x1b4e <KEYPAD_getPressedKey+0x78>

#ifndef KEYPAD_STANDARD
	#if KEYPAD_COLUMN_NUMBER==3
						return KEYPAD_4x3_adjustKeyNumber(row * KEYPAD_COLUMN_NUMBER + col + 1);
	#else
						return KEYPAD_4x4_adjustKeyNumber(row*KEYPAD_COLUMN_NUMBER+col+1);
    1b24:	89 89       	ldd	r24, Y+17	; 0x11
    1b26:	9a 89       	ldd	r25, Y+18	; 0x12
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	98 2f       	mov	r25, r24
    1b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b34:	89 0f       	add	r24, r25
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_INPUT);
			_delay_ms(5);
		}
	}

}
    1b3c:	62 96       	adiw	r28, 0x12	; 18
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_PRESSED_LOGIC);

			for (col = 0; col < KEYPAD_COLUMN_NUMBER; col++) {
    1b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b50:	98 89       	ldd	r25, Y+16	; 0x10
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	98 8b       	std	Y+16, r25	; 0x10
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	98 89       	ldd	r25, Y+16	; 0x10
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	91 05       	cpc	r25, r1
    1b60:	c4 f2       	brlt	.-80     	; 0x1b12 <KEYPAD_getPressedKey+0x3c>
						return row*KEYPAD_COLUMN_NUMBER+col+1;
#endif
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_INPUT);
    1b62:	99 89       	ldd	r25, Y+17	; 0x11
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	69 2f       	mov	r22, r25
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <GPIO_setupPinDirection>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 ea       	ldi	r26, 0xA0	; 160
    1b74:	b0 e4       	ldi	r27, 0x40	; 64
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	9c 87       	std	Y+12, r25	; 0x0c
    1b7a:	ad 87       	std	Y+13, r26	; 0x0d
    1b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a ef       	ldi	r20, 0xFA	; 250
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8f 83       	std	Y+7, r24	; 0x07
    1b98:	98 87       	std	Y+8, r25	; 0x08
    1b9a:	a9 87       	std	Y+9, r26	; 0x09
    1b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <KEYPAD_getPressedKey+0xea>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <KEYPAD_getPressedKey+0x168>
	else if (__tmp > 65535)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <KEYPAD_getPressedKey+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <KEYPAD_getPressedKey+0x14a>
    1c02:	88 ec       	ldi	r24, 0xC8	; 200
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <KEYPAD_getPressedKey+0x138>
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <KEYPAD_getPressedKey+0x12c>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <KEYPAD_getPressedKey+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <KEYPAD_getPressedKey+0x174>
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
/* get the keypad button pressed */
uint8 KEYPAD_getPressedKey(void) {
	int row, col;
	KEYPAD_init();
	while (1) {
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {
    1c52:	89 89       	ldd	r24, Y+17	; 0x11
    1c54:	9a 89       	ldd	r25, Y+18	; 0x12
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
    1c5c:	89 89       	ldd	r24, Y+17	; 0x11
    1c5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	91 05       	cpc	r25, r1
    1c64:	0c f4       	brge	.+2      	; 0x1c68 <KEYPAD_getPressedKey+0x192>
    1c66:	46 cf       	rjmp	.-372    	; 0x1af4 <KEYPAD_getPressedKey+0x1e>
    1c68:	42 cf       	rjmp	.-380    	; 0x1aee <KEYPAD_getPressedKey+0x18>

00001c6a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <GPIO_setupPinDirection+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <GPIO_setupPinDirection+0x8>
    1c72:	0f 92       	push	r0
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	6a 83       	std	Y+2, r22	; 0x02
    1c7c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	88 30       	cpi	r24, 0x08	; 8
    1c82:	08 f0       	brcs	.+2      	; 0x1c86 <GPIO_setupPinDirection+0x1c>
    1c84:	d5 c0       	rjmp	.+426    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <GPIO_setupPinDirection+0x24>
    1c8c:	d1 c0       	rjmp	.+418    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3d 83       	std	Y+5, r19	; 0x05
    1c96:	2c 83       	std	Y+4, r18	; 0x04
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <GPIO_setupPinDirection+0x3a>
    1ca2:	43 c0       	rjmp	.+134    	; 0x1d2a <GPIO_setupPinDirection+0xc0>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <GPIO_setupPinDirection+0x4e>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	71 f0       	breq	.+28     	; 0x1cd2 <GPIO_setupPinDirection+0x68>
    1cb6:	bc c0       	rjmp	.+376    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
    1cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cba:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbc:	22 30       	cpi	r18, 0x02	; 2
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <GPIO_setupPinDirection+0x5a>
    1cc2:	5f c0       	rjmp	.+190    	; 0x1d82 <GPIO_setupPinDirection+0x118>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <GPIO_setupPinDirection+0x66>
    1cce:	85 c0       	rjmp	.+266    	; 0x1dda <GPIO_setupPinDirection+0x170>
    1cd0:	af c0       	rjmp	.+350    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cd8:	aa e3       	ldi	r26, 0x3A	; 58
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	ea e3       	ldi	r30, 0x3A	; 58
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_setupPinDirection+0x8c>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_setupPinDirection+0x88>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	98 c0       	rjmp	.+304    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d00:	aa e3       	ldi	r26, 0x3A	; 58
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ea e3       	ldi	r30, 0x3A	; 58
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_setupPinDirection+0xb4>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_setupPinDirection+0xb0>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	83 c0       	rjmp	.+262    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	a1 f4       	brne	.+40     	; 0x1d58 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d30:	a7 e3       	ldi	r26, 0x37	; 55
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e7 e3       	ldi	r30, 0x37	; 55
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_setupPinDirection+0xe4>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_setupPinDirection+0xe0>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	6c c0       	rjmp	.+216    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d58:	a7 e3       	ldi	r26, 0x37	; 55
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e7 e3       	ldi	r30, 0x37	; 55
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <GPIO_setupPinDirection+0x10c>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <GPIO_setupPinDirection+0x108>
    1d7a:	80 95       	com	r24
    1d7c:	84 23       	and	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	57 c0       	rjmp	.+174    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d88:	a4 e3       	ldi	r26, 0x34	; 52
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e4 e3       	ldi	r30, 0x34	; 52
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_setupPinDirection+0x13c>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_setupPinDirection+0x138>
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	40 c0       	rjmp	.+128    	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1db0:	a4 e3       	ldi	r26, 0x34	; 52
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e4 e3       	ldi	r30, 0x34	; 52
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <GPIO_setupPinDirection+0x164>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <GPIO_setupPinDirection+0x160>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	2b c0       	rjmp	.+86     	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	a1 f4       	brne	.+40     	; 0x1e08 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1de0:	a1 e3       	ldi	r26, 0x31	; 49
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_setupPinDirection+0x194>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_setupPinDirection+0x190>
    1e02:	84 2b       	or	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	14 c0       	rjmp	.+40     	; 0x1e30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e08:	a1 e3       	ldi	r26, 0x31	; 49
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e1 e3       	ldi	r30, 0x31	; 49
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <GPIO_setupPinDirection+0x1bc>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <GPIO_setupPinDirection+0x1b8>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <GPIO_writePin+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <GPIO_writePin+0x8>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	6a 83       	std	Y+2, r22	; 0x02
    1e52:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	88 30       	cpi	r24, 0x08	; 8
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <GPIO_writePin+0x1c>
    1e5a:	d5 c0       	rjmp	.+426    	; 0x2006 <GPIO_writePin+0x1c6>
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <GPIO_writePin+0x24>
    1e62:	d1 c0       	rjmp	.+418    	; 0x2006 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	3d 83       	std	Y+5, r19	; 0x05
    1e6c:	2c 83       	std	Y+4, r18	; 0x04
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	91 05       	cpc	r25, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <GPIO_writePin+0x3a>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <GPIO_writePin+0xc0>
    1e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <GPIO_writePin+0x4e>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	9d 81       	ldd	r25, Y+5	; 0x05
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <GPIO_writePin+0x68>
    1e8c:	bc c0       	rjmp	.+376    	; 0x2006 <GPIO_writePin+0x1c6>
    1e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e90:	3d 81       	ldd	r19, Y+5	; 0x05
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <GPIO_writePin+0x5a>
    1e98:	5f c0       	rjmp	.+190    	; 0x1f58 <GPIO_writePin+0x118>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <GPIO_writePin+0x66>
    1ea4:	85 c0       	rjmp	.+266    	; 0x1fb0 <GPIO_writePin+0x170>
    1ea6:	af c0       	rjmp	.+350    	; 0x2006 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	a1 f4       	brne	.+40     	; 0x1ed6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1eae:	ab e3       	ldi	r26, 0x3B	; 59
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	eb e3       	ldi	r30, 0x3B	; 59
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_writePin+0x8c>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_writePin+0x88>
    1ed0:	84 2b       	or	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	98 c0       	rjmp	.+304    	; 0x2006 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ed6:	ab e3       	ldi	r26, 0x3B	; 59
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	eb e3       	ldi	r30, 0x3B	; 59
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_writePin+0xb4>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_writePin+0xb0>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	83 c0       	rjmp	.+262    	; 0x2006 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	a1 f4       	brne	.+40     	; 0x1f2e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f06:	a8 e3       	ldi	r26, 0x38	; 56
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e8 e3       	ldi	r30, 0x38	; 56
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <GPIO_writePin+0xe4>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <GPIO_writePin+0xe0>
    1f28:	84 2b       	or	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	6c c0       	rjmp	.+216    	; 0x2006 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f2e:	a8 e3       	ldi	r26, 0x38	; 56
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e8 e3       	ldi	r30, 0x38	; 56
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <GPIO_writePin+0x10c>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <GPIO_writePin+0x108>
    1f50:	80 95       	com	r24
    1f52:	84 23       	and	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	57 c0       	rjmp	.+174    	; 0x2006 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	a1 f4       	brne	.+40     	; 0x1f86 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f5e:	a5 e3       	ldi	r26, 0x35	; 53
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 e3       	ldi	r30, 0x35	; 53
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_writePin+0x13c>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_writePin+0x138>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	40 c0       	rjmp	.+128    	; 0x2006 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f86:	a5 e3       	ldi	r26, 0x35	; 53
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e3       	ldi	r30, 0x35	; 53
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <GPIO_writePin+0x164>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <GPIO_writePin+0x160>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	2b c0       	rjmp	.+86     	; 0x2006 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	a1 f4       	brne	.+40     	; 0x1fde <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fb6:	a2 e3       	ldi	r26, 0x32	; 50
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e2 e3       	ldi	r30, 0x32	; 50
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <GPIO_writePin+0x194>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <GPIO_writePin+0x190>
    1fd8:	84 2b       	or	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fde:	a2 e3       	ldi	r26, 0x32	; 50
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e2 e3       	ldi	r30, 0x32	; 50
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	48 2f       	mov	r20, r24
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 2e       	mov	r0, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <GPIO_writePin+0x1bc>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <GPIO_writePin+0x1b8>
    2000:	80 95       	com	r24
    2002:	84 23       	and	r24, r20
    2004:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <GPIO_readPin+0x6>
    201c:	00 d0       	rcall	.+0      	; 0x201e <GPIO_readPin+0x8>
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	8a 83       	std	Y+2, r24	; 0x02
    2026:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2028:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 30       	cpi	r24, 0x08	; 8
    202e:	08 f0       	brcs	.+2      	; 0x2032 <GPIO_readPin+0x1c>
    2030:	84 c0       	rjmp	.+264    	; 0x213a <GPIO_readPin+0x124>
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	84 30       	cpi	r24, 0x04	; 4
    2036:	08 f0       	brcs	.+2      	; 0x203a <GPIO_readPin+0x24>
    2038:	80 c0       	rjmp	.+256    	; 0x213a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	4c 81       	ldd	r20, Y+4	; 0x04
    2046:	5d 81       	ldd	r21, Y+5	; 0x05
    2048:	41 30       	cpi	r20, 0x01	; 1
    204a:	51 05       	cpc	r21, r1
    204c:	79 f1       	breq	.+94     	; 0x20ac <GPIO_readPin+0x96>
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	91 05       	cpc	r25, r1
    2056:	34 f4       	brge	.+12     	; 0x2064 <GPIO_readPin+0x4e>
    2058:	2c 81       	ldd	r18, Y+4	; 0x04
    205a:	3d 81       	ldd	r19, Y+5	; 0x05
    205c:	21 15       	cp	r18, r1
    205e:	31 05       	cpc	r19, r1
    2060:	69 f0       	breq	.+26     	; 0x207c <GPIO_readPin+0x66>
    2062:	6b c0       	rjmp	.+214    	; 0x213a <GPIO_readPin+0x124>
    2064:	4c 81       	ldd	r20, Y+4	; 0x04
    2066:	5d 81       	ldd	r21, Y+5	; 0x05
    2068:	42 30       	cpi	r20, 0x02	; 2
    206a:	51 05       	cpc	r21, r1
    206c:	b9 f1       	breq	.+110    	; 0x20dc <GPIO_readPin+0xc6>
    206e:	8c 81       	ldd	r24, Y+4	; 0x04
    2070:	9d 81       	ldd	r25, Y+5	; 0x05
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	91 05       	cpc	r25, r1
    2076:	09 f4       	brne	.+2      	; 0x207a <GPIO_readPin+0x64>
    2078:	49 c0       	rjmp	.+146    	; 0x210c <GPIO_readPin+0xf6>
    207a:	5f c0       	rjmp	.+190    	; 0x213a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    207c:	e9 e3       	ldi	r30, 0x39	; 57
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a9 01       	movw	r20, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <GPIO_readPin+0x7e>
    2090:	55 95       	asr	r21
    2092:	47 95       	ror	r20
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <GPIO_readPin+0x7a>
    2098:	ca 01       	movw	r24, r20
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	49 c0       	rjmp	.+146    	; 0x213a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20a8:	19 82       	std	Y+1, r1	; 0x01
    20aa:	47 c0       	rjmp	.+142    	; 0x213a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20ac:	e6 e3       	ldi	r30, 0x36	; 54
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <GPIO_readPin+0xae>
    20c0:	55 95       	asr	r21
    20c2:	47 95       	ror	r20
    20c4:	8a 95       	dec	r24
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <GPIO_readPin+0xaa>
    20c8:	ca 01       	movw	r24, r20
    20ca:	81 70       	andi	r24, 0x01	; 1
    20cc:	90 70       	andi	r25, 0x00	; 0
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	19 f0       	breq	.+6      	; 0x20d8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	31 c0       	rjmp	.+98     	; 0x213a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20d8:	19 82       	std	Y+1, r1	; 0x01
    20da:	2f c0       	rjmp	.+94     	; 0x213a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20dc:	e3 e3       	ldi	r30, 0x33	; 51
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a9 01       	movw	r20, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <GPIO_readPin+0xde>
    20f0:	55 95       	asr	r21
    20f2:	47 95       	ror	r20
    20f4:	8a 95       	dec	r24
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <GPIO_readPin+0xda>
    20f8:	ca 01       	movw	r24, r20
    20fa:	81 70       	andi	r24, 0x01	; 1
    20fc:	90 70       	andi	r25, 0x00	; 0
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	19 f0       	breq	.+6      	; 0x2108 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	19 c0       	rjmp	.+50     	; 0x213a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2108:	19 82       	std	Y+1, r1	; 0x01
    210a:	17 c0       	rjmp	.+46     	; 0x213a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    210c:	e0 e3       	ldi	r30, 0x30	; 48
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <GPIO_readPin+0x10e>
    2120:	55 95       	asr	r21
    2122:	47 95       	ror	r20
    2124:	8a 95       	dec	r24
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <GPIO_readPin+0x10a>
    2128:	ca 01       	movw	r24, r20
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	90 70       	andi	r25, 0x00	; 0
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	19 f0       	breq	.+6      	; 0x2138 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	01 c0       	rjmp	.+2      	; 0x213a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2138:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <GPIO_setupPortDirection+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <GPIO_setupPortDirection+0x8>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	84 30       	cpi	r24, 0x04	; 4
    2160:	90 f5       	brcc	.+100    	; 0x21c6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	3c 83       	std	Y+4, r19	; 0x04
    216a:	2b 83       	std	Y+3, r18	; 0x03
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	91 05       	cpc	r25, r1
    2174:	d1 f0       	breq	.+52     	; 0x21aa <GPIO_setupPortDirection+0x5e>
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	22 30       	cpi	r18, 0x02	; 2
    217c:	31 05       	cpc	r19, r1
    217e:	2c f4       	brge	.+10     	; 0x218a <GPIO_setupPortDirection+0x3e>
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	61 f0       	breq	.+24     	; 0x21a0 <GPIO_setupPortDirection+0x54>
    2188:	1e c0       	rjmp	.+60     	; 0x21c6 <GPIO_setupPortDirection+0x7a>
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	31 05       	cpc	r19, r1
    2192:	81 f0       	breq	.+32     	; 0x21b4 <GPIO_setupPortDirection+0x68>
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	91 05       	cpc	r25, r1
    219c:	81 f0       	breq	.+32     	; 0x21be <GPIO_setupPortDirection+0x72>
    219e:	13 c0       	rjmp	.+38     	; 0x21c6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21a0:	ea e3       	ldi	r30, 0x3A	; 58
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	80 83       	st	Z, r24
    21a8:	0e c0       	rjmp	.+28     	; 0x21c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21aa:	e7 e3       	ldi	r30, 0x37	; 55
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	80 83       	st	Z, r24
    21b2:	09 c0       	rjmp	.+18     	; 0x21c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21b4:	e4 e3       	ldi	r30, 0x34	; 52
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	80 83       	st	Z, r24
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21be:	e1 e3       	ldi	r30, 0x31	; 49
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <GPIO_writePort+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <GPIO_writePort+0x8>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	84 30       	cpi	r24, 0x04	; 4
    21e8:	90 f5       	brcc	.+100    	; 0x224e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3c 83       	std	Y+4, r19	; 0x04
    21f2:	2b 83       	std	Y+3, r18	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	d1 f0       	breq	.+52     	; 0x2232 <GPIO_writePort+0x5e>
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	2c f4       	brge	.+10     	; 0x2212 <GPIO_writePort+0x3e>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	61 f0       	breq	.+24     	; 0x2228 <GPIO_writePort+0x54>
    2210:	1e c0       	rjmp	.+60     	; 0x224e <GPIO_writePort+0x7a>
    2212:	2b 81       	ldd	r18, Y+3	; 0x03
    2214:	3c 81       	ldd	r19, Y+4	; 0x04
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <GPIO_writePort+0x68>
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	81 f0       	breq	.+32     	; 0x2246 <GPIO_writePort+0x72>
    2226:	13 c0       	rjmp	.+38     	; 0x224e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2228:	eb e3       	ldi	r30, 0x3B	; 59
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	80 83       	st	Z, r24
    2230:	0e c0       	rjmp	.+28     	; 0x224e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2232:	e8 e3       	ldi	r30, 0x38	; 56
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	80 83       	st	Z, r24
    223a:	09 c0       	rjmp	.+18     	; 0x224e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    223c:	e5 e3       	ldi	r30, 0x35	; 53
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	80 83       	st	Z, r24
    2244:	04 c0       	rjmp	.+8      	; 0x224e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2246:	e2 e3       	ldi	r30, 0x32	; 50
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	80 83       	st	Z, r24
			break;
		}
	}
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <GPIO_readPort+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <GPIO_readPort+0x8>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    226a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	84 30       	cpi	r24, 0x04	; 4
    2270:	90 f5       	brcc	.+100    	; 0x22d6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	3c 83       	std	Y+4, r19	; 0x04
    227a:	2b 83       	std	Y+3, r18	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	91 05       	cpc	r25, r1
    2284:	d1 f0       	breq	.+52     	; 0x22ba <GPIO_readPort+0x5e>
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	3c 81       	ldd	r19, Y+4	; 0x04
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	31 05       	cpc	r19, r1
    228e:	2c f4       	brge	.+10     	; 0x229a <GPIO_readPort+0x3e>
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	61 f0       	breq	.+24     	; 0x22b0 <GPIO_readPort+0x54>
    2298:	1e c0       	rjmp	.+60     	; 0x22d6 <GPIO_readPort+0x7a>
    229a:	2b 81       	ldd	r18, Y+3	; 0x03
    229c:	3c 81       	ldd	r19, Y+4	; 0x04
    229e:	22 30       	cpi	r18, 0x02	; 2
    22a0:	31 05       	cpc	r19, r1
    22a2:	81 f0       	breq	.+32     	; 0x22c4 <GPIO_readPort+0x68>
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	83 30       	cpi	r24, 0x03	; 3
    22aa:	91 05       	cpc	r25, r1
    22ac:	81 f0       	breq	.+32     	; 0x22ce <GPIO_readPort+0x72>
    22ae:	13 c0       	rjmp	.+38     	; 0x22d6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22b0:	e9 e3       	ldi	r30, 0x39	; 57
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	0e c0       	rjmp	.+28     	; 0x22d6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22ba:	e6 e3       	ldi	r30, 0x36	; 54
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	09 c0       	rjmp	.+18     	; 0x22d6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22c4:	e3 e3       	ldi	r30, 0x33	; 51
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22ce:	e0 e3       	ldi	r30, 0x30	; 48
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <main>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

	uint16 seconds;
int main(){
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	a6 97       	sbiw	r28, 0x26	; 38
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
	uint8 unMatchCounter,pressedButton;
	Timer1_ConfigType timer1={0,31250,TIMER1_FRQ256, TIMER1_CTC};
    22fa:	ce 01       	movw	r24, r28
    22fc:	41 96       	adiw	r24, 0x11	; 17
    22fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2300:	8d 8f       	std	Y+29, r24	; 0x1d
    2302:	ef ee       	ldi	r30, 0xEF	; 239
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	f8 a3       	std	Y+32, r31	; 0x20
    2308:	ef 8f       	std	Y+31, r30	; 0x1f
    230a:	f6 e0       	ldi	r31, 0x06	; 6
    230c:	f9 a3       	std	Y+33, r31	; 0x21
    230e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2310:	f8 a1       	ldd	r31, Y+32	; 0x20
    2312:	00 80       	ld	r0, Z
    2314:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2316:	98 a1       	ldd	r25, Y+32	; 0x20
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	98 a3       	std	Y+32, r25	; 0x20
    231c:	8f 8f       	std	Y+31, r24	; 0x1f
    231e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2320:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2322:	00 82       	st	Z, r0
    2324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2326:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	9e 8f       	std	Y+30, r25	; 0x1e
    232c:	8d 8f       	std	Y+29, r24	; 0x1d
    232e:	99 a1       	ldd	r25, Y+33	; 0x21
    2330:	91 50       	subi	r25, 0x01	; 1
    2332:	99 a3       	std	Y+33, r25	; 0x21
    2334:	e9 a1       	ldd	r30, Y+33	; 0x21
    2336:	ee 23       	and	r30, r30
    2338:	51 f7       	brne	.-44     	; 0x230e <main+0x28>
	 UART_ConfigType uart = { INTERRUPT_DISABLE, EVEN_PARITY, ONE_BIT,
				EIGHT_BIT, BAUD_RATE_9600 };
    233a:	ce 01       	movw	r24, r28
    233c:	47 96       	adiw	r24, 0x17	; 23
    233e:	9b a3       	std	Y+35, r25	; 0x23
    2340:	8a a3       	std	Y+34, r24	; 0x22
    2342:	e9 ee       	ldi	r30, 0xE9	; 233
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	fd a3       	std	Y+37, r31	; 0x25
    2348:	ec a3       	std	Y+36, r30	; 0x24
    234a:	f6 e0       	ldi	r31, 0x06	; 6
    234c:	fe a3       	std	Y+38, r31	; 0x26
    234e:	ec a1       	ldd	r30, Y+36	; 0x24
    2350:	fd a1       	ldd	r31, Y+37	; 0x25
    2352:	00 80       	ld	r0, Z
    2354:	8c a1       	ldd	r24, Y+36	; 0x24
    2356:	9d a1       	ldd	r25, Y+37	; 0x25
    2358:	01 96       	adiw	r24, 0x01	; 1
    235a:	9d a3       	std	Y+37, r25	; 0x25
    235c:	8c a3       	std	Y+36, r24	; 0x24
    235e:	ea a1       	ldd	r30, Y+34	; 0x22
    2360:	fb a1       	ldd	r31, Y+35	; 0x23
    2362:	00 82       	st	Z, r0
    2364:	8a a1       	ldd	r24, Y+34	; 0x22
    2366:	9b a1       	ldd	r25, Y+35	; 0x23
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	9b a3       	std	Y+35, r25	; 0x23
    236c:	8a a3       	std	Y+34, r24	; 0x22
    236e:	9e a1       	ldd	r25, Y+38	; 0x26
    2370:	91 50       	subi	r25, 0x01	; 1
    2372:	9e a3       	std	Y+38, r25	; 0x26
    2374:	ee a1       	ldd	r30, Y+38	; 0x26
    2376:	ee 23       	and	r30, r30
    2378:	51 f7       	brne	.-44     	; 0x234e <main+0x68>

	sei();
    237a:	78 94       	sei

	Timer1_init(&timer1);
    237c:	ce 01       	movw	r24, r28
    237e:	41 96       	adiw	r24, 0x11	; 17
    2380:	0e 94 57 07 	call	0xeae	; 0xeae <Timer1_init>
	Timer1_setCallBack(secondsCounter);
    2384:	81 eb       	ldi	r24, 0xB1	; 177
    2386:	92 e1       	ldi	r25, 0x12	; 18
    2388:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Timer1_setCallBack>
	UART_init(&uart);
    238c:	ce 01       	movw	r24, r28
    238e:	47 96       	adiw	r24, 0x17	; 23
    2390:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_init>
	LCD_init();
    2394:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_init>

	/* create new password to the system */
	while(createPassword()==FAILURE);
    2398:	0e 94 61 13 	call	0x26c2	; 0x26c2 <createPassword>
    239c:	88 23       	and	r24, r24
    239e:	e1 f3       	breq	.-8      	; 0x2398 <main+0xb2>

	while(1){
		LCD_clearScreen();
    23a0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
    23ac:	80 e6       	ldi	r24, 0x60	; 96
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
		LCD_moveCursor(1,0);
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
		LCD_displayString("- : Change pass");
    23bc:	8e e6       	ldi	r24, 0x6E	; 110
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>

		/* get options */
		pressedButton=KEYPAD_getPressedKey();
    23c4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <KEYPAD_getPressedKey>
    23c8:	8f 87       	std	Y+15, r24	; 0x0f
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a8 ec       	ldi	r26, 0xC8	; 200
    23d0:	b3 e4       	ldi	r27, 0x43	; 67
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <main+0x136>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <main+0x1b4>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <main+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <main+0x196>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <main+0x184>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <main+0x178>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <main+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <main+0x1c0>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
		/* for solving overlapping */
		_delay_ms(400);

		/* check the pressed button */
		if(pressedButton!='-'&&pressedButton!='+')
    24ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b0:	8d 32       	cpi	r24, 0x2D	; 45
    24b2:	21 f0       	breq	.+8      	; 0x24bc <main+0x1d6>
    24b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b6:	8b 32       	cpi	r24, 0x2B	; 43
    24b8:	09 f0       	breq	.+2      	; 0x24bc <main+0x1d6>
    24ba:	72 cf       	rjmp	.-284    	; 0x23a0 <main+0xba>
			continue;

		/* check the Password */
		unMatchCounter=0;
    24bc:	18 8a       	std	Y+16, r1	; 0x10
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <main+0x1e0>
		while (unMatchCounter < 3 && checkPassword() == FAILURE) {
			unMatchCounter++;
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	8f 5f       	subi	r24, 0xFF	; 255
    24c4:	88 8b       	std	Y+16, r24	; 0x10
		if(pressedButton!='-'&&pressedButton!='+')
			continue;

		/* check the Password */
		unMatchCounter=0;
		while (unMatchCounter < 3 && checkPassword() == FAILURE) {
    24c6:	88 89       	ldd	r24, Y+16	; 0x10
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	20 f4       	brcc	.+8      	; 0x24d4 <main+0x1ee>
    24cc:	0e 94 ca 13 	call	0x2794	; 0x2794 <checkPassword>
    24d0:	88 23       	and	r24, r24
    24d2:	b1 f3       	breq	.-20     	; 0x24c0 <main+0x1da>
			unMatchCounter++;
		}

		if (unMatchCounter == 3) {
    24d4:	88 89       	ldd	r24, Y+16	; 0x10
    24d6:	83 30       	cpi	r24, 0x03	; 3
    24d8:	19 f4       	brne	.+6      	; 0x24e0 <main+0x1fa>
			error();
    24da:	0e 94 09 14 	call	0x2812	; 0x2812 <error>
    24de:	60 cf       	rjmp	.-320    	; 0x23a0 <main+0xba>
			continue;
		}

		if(pressedButton=='-'){
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	8d 32       	cpi	r24, 0x2D	; 45
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <main+0x20a>
			/* create new password */
			while(createPassword()==FAILURE);
    24e6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <createPassword>
    24ea:	88 23       	and	r24, r24
    24ec:	e1 f3       	breq	.-8      	; 0x24e6 <main+0x200>
    24ee:	58 cf       	rjmp	.-336    	; 0x23a0 <main+0xba>

		}else if(pressedButton=='+'){
    24f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f2:	8b 32       	cpi	r24, 0x2B	; 43
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <main+0x212>
    24f6:	54 cf       	rjmp	.-344    	; 0x23a0 <main+0xba>
			/* opening door lock routine */

			UART_sendByte(UART_OPEN_DOOR_FLAG);
    24f8:	86 e0       	ldi	r24, 0x06	; 6
    24fa:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>

			LCD_clearScreen();
    24fe:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
			LCD_displayString("Door is Unlocking");
    250a:	8e e7       	ldi	r24, 0x7E	; 126
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>

			seconds=0;
    2512:	10 92 fb 00 	sts	0x00FB, r1
    2516:	10 92 fa 00 	sts	0x00FA, r1
			while(seconds<15);
    251a:	80 91 fa 00 	lds	r24, 0x00FA
    251e:	90 91 fb 00 	lds	r25, 0x00FB
    2522:	8f 30       	cpi	r24, 0x0F	; 15
    2524:	91 05       	cpc	r25, r1
    2526:	c8 f3       	brcs	.-14     	; 0x251a <main+0x234>

			LCD_clearScreen();
    2528:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
			LCD_displayString("Unlocked");
    252c:	80 e9       	ldi	r24, 0x90	; 144
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>

			while(seconds<18);
    2534:	80 91 fa 00 	lds	r24, 0x00FA
    2538:	90 91 fb 00 	lds	r25, 0x00FB
    253c:	82 31       	cpi	r24, 0x12	; 18
    253e:	91 05       	cpc	r25, r1
    2540:	c8 f3       	brcs	.-14     	; 0x2534 <main+0x24e>

			LCD_moveCursor(0,0);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
			LCD_displayString("Door is Locking");
    254a:	89 e9       	ldi	r24, 0x99	; 153
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>

			while(seconds<33);
    2552:	80 91 fa 00 	lds	r24, 0x00FA
    2556:	90 91 fb 00 	lds	r25, 0x00FB
    255a:	81 32       	cpi	r24, 0x21	; 33
    255c:	91 05       	cpc	r25, r1
    255e:	c8 f3       	brcs	.-14     	; 0x2552 <main+0x26c>
    2560:	1f cf       	rjmp	.-450    	; 0x23a0 <main+0xba>

00002562 <secondsCounter>:
	}


}

void secondsCounter(void){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    256a:	80 91 fa 00 	lds	r24, 0x00FA
    256e:	90 91 fb 00 	lds	r25, 0x00FB
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	90 93 fb 00 	sts	0x00FB, r25
    2578:	80 93 fa 00 	sts	0x00FA, r24
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <takePassword>:

void takePassword(uint8 *str){
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	62 97       	sbiw	r28, 0x12	; 18
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	9a 8b       	std	Y+18, r25	; 0x12
    2598:	89 8b       	std	Y+17, r24	; 0x11
	uint8 idx=0,pressedButton;
    259a:	18 8a       	std	Y+16, r1	; 0x10
	while (1) {
		pressedButton = KEYPAD_getPressedKey();
    259c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <KEYPAD_getPressedKey>
    25a0:	8f 87       	std	Y+15, r24	; 0x0f
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a8 ec       	ldi	r26, 0xC8	; 200
    25a8:	b3 e4       	ldi	r27, 0x43	; 67
    25aa:	8b 87       	std	Y+11, r24	; 0x0b
    25ac:	9c 87       	std	Y+12, r25	; 0x0c
    25ae:	ad 87       	std	Y+13, r26	; 0x0d
    25b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a ef       	ldi	r20, 0xFA	; 250
    25c0:	54 e4       	ldi	r21, 0x44	; 68
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8f 83       	std	Y+7, r24	; 0x07
    25cc:	98 87       	std	Y+8, r25	; 0x08
    25ce:	a9 87       	std	Y+9, r26	; 0x09
    25d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <takePassword+0x72>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <takePassword+0xf0>
	else if (__tmp > 65535)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <takePassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	6b 85       	ldd	r22, Y+11	; 0x0b
    260e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2610:	8d 85       	ldd	r24, Y+13	; 0x0d
    2612:	9e 85       	ldd	r25, Y+14	; 0x0e
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <takePassword+0xd2>
    2636:	88 ec       	ldi	r24, 0xC8	; 200
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	8b 83       	std	Y+3, r24	; 0x03
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <takePassword+0xc0>
    2646:	9c 83       	std	Y+4, r25	; 0x04
    2648:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <takePassword+0xb4>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <takePassword+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <takePassword+0xfc>
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01

		/* for solving overlapping */
		_delay_ms(400);

		if (pressedButton == ENTER_BUTTON) {
    2686:	8f 85       	ldd	r24, Y+15	; 0x0f
    2688:	8d 33       	cpi	r24, 0x3D	; 61
    268a:	91 f0       	breq	.+36     	; 0x26b0 <takePassword+0x12e>
			break;
		}
		str[idx++] = pressedButton + '0';
    268c:	88 89       	ldd	r24, Y+16	; 0x10
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	89 89       	ldd	r24, Y+17	; 0x11
    2694:	9a 89       	ldd	r25, Y+18	; 0x12
    2696:	fc 01       	movw	r30, r24
    2698:	e2 0f       	add	r30, r18
    269a:	f3 1f       	adc	r31, r19
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	80 5d       	subi	r24, 0xD0	; 208
    26a0:	80 83       	st	Z, r24
    26a2:	88 89       	ldd	r24, Y+16	; 0x10
    26a4:	8f 5f       	subi	r24, 0xFF	; 255
    26a6:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    26a8:	8a e2       	ldi	r24, 0x2A	; 42
    26aa:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <LCD_displayCharacter>
    26ae:	76 cf       	rjmp	.-276    	; 0x259c <takePassword+0x1a>
	}
}
    26b0:	62 96       	adiw	r28, 0x12	; 18
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <createPassword>:

uint8 createPassword(){
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	2b 97       	sbiw	r28, 0x0b	; 11
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5], password_confirmation[5], idx = 0;
    26d6:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    26d8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    26e4:	89 ea       	ldi	r24, 0xA9	; 169
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
	LCD_moveCursor(1, 0);
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>

	/* take the pass from the user */
	takePassword(password);
    26f4:	ce 01       	movw	r24, r28
    26f6:	02 96       	adiw	r24, 0x02	; 2
    26f8:	0e 94 c1 12 	call	0x2582	; 0x2582 <takePassword>

	LCD_moveCursor(0, 0);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString("plz re_enter the");
    2704:	8a eb       	ldi	r24, 0xBA	; 186
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
	LCD_moveCursor(1, 0);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString("same pass: ");
    2714:	8b ec       	ldi	r24, 0xCB	; 203
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>


	/* re-take the pass from the user */
	takePassword(password_confirmation);
    271c:	ce 01       	movw	r24, r28
    271e:	07 96       	adiw	r24, 0x07	; 7
    2720:	0e 94 c1 12 	call	0x2582	; 0x2582 <takePassword>

	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
    2724:	84 e0       	ldi	r24, 0x04	; 4
    2726:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
	for (idx = 0; idx < 5; idx++) {
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	0e c0       	rjmp	.+28     	; 0x274a <createPassword+0x88>
		UART_sendByte(password[idx]);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	ce 01       	movw	r24, r28
    2736:	02 96       	adiw	r24, 0x02	; 2
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	80 81       	ld	r24, Z
    2740:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
	/* re-take the pass from the user */
	takePassword(password_confirmation);

	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	85 30       	cpi	r24, 0x05	; 5
    274e:	78 f3       	brcs	.-34     	; 0x272e <createPassword+0x6c>
		UART_sendByte(password[idx]);
	}
	for (idx = 0; idx < 5; idx++) {
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <createPassword+0xae>
		UART_sendByte(password_confirmation[idx]);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	ce 01       	movw	r24, r28
    275c:	07 96       	adiw	r24, 0x07	; 7
    275e:	fc 01       	movw	r30, r24
    2760:	e2 0f       	add	r30, r18
    2762:	f3 1f       	adc	r31, r19
    2764:	80 81       	ld	r24, Z
    2766:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
		UART_sendByte(password[idx]);
	}
	for (idx = 0; idx < 5; idx++) {
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	85 30       	cpi	r24, 0x05	; 5
    2774:	78 f3       	brcs	.-34     	; 0x2754 <createPassword+0x92>
		UART_sendByte(password_confirmation[idx]);
	}

	/* UART sync */
	while(UART_recieveByte()!=UART_READY);
    2776:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_recieveByte>
    277a:	88 30       	cpi	r24, 0x08	; 8
    277c:	e1 f7       	brne	.-8      	; 0x2776 <createPassword+0xb4>

	/* get the response of controller */
	return UART_recieveByte();
    277e:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_recieveByte>
}
    2782:	2b 96       	adiw	r28, 0x0b	; 11
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <checkPassword>:

uint8 checkPassword(void){
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <checkPassword+0x6>
    279a:	00 d0       	rcall	.+0      	; 0x279c <checkPassword+0x8>
    279c:	00 d0       	rcall	.+0      	; 0x279e <checkPassword+0xa>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
	uint8 pass[5], idx=0;
    27a2:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    27a4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    27b0:	89 ea       	ldi	r24, 0xA9	; 169
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>
	LCD_moveCursor(1,0);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>

	/* take the pass from the user */
	takePassword(pass);
    27c0:	ce 01       	movw	r24, r28
    27c2:	02 96       	adiw	r24, 0x02	; 2
    27c4:	0e 94 c1 12 	call	0x2582	; 0x2582 <takePassword>

	UART_sendByte(UART_CONFIRM_PASS_FLAG);
    27c8:	85 e0       	ldi	r24, 0x05	; 5
    27ca:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>
	for (idx = 0; idx < 5; idx++) {
    27ce:	19 82       	std	Y+1, r1	; 0x01
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <checkPassword+0x5a>
		UART_sendByte(pass[idx]);
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ce 01       	movw	r24, r28
    27da:	02 96       	adiw	r24, 0x02	; 2
    27dc:	fc 01       	movw	r30, r24
    27de:	e2 0f       	add	r30, r18
    27e0:	f3 1f       	adc	r31, r19
    27e2:	80 81       	ld	r24, Z
    27e4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>

	/* take the pass from the user */
	takePassword(pass);

	UART_sendByte(UART_CONFIRM_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	85 30       	cpi	r24, 0x05	; 5
    27f2:	78 f3       	brcs	.-34     	; 0x27d2 <checkPassword+0x3e>
		UART_sendByte(pass[idx]);
	}

	while(UART_recieveByte()!=UART_READY);
    27f4:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_recieveByte>
    27f8:	88 30       	cpi	r24, 0x08	; 8
    27fa:	e1 f7       	brne	.-8      	; 0x27f4 <checkPassword+0x60>

	return UART_recieveByte();
    27fc:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_recieveByte>
}
    2800:	26 96       	adiw	r28, 0x06	; 6
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <error>:

void error(void){
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(UART_PASS_UNMATCH);
    281a:	87 e0       	ldi	r24, 0x07	; 7
    281c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_sendByte>

	LCD_clearScreen();
    2820:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_moveCursor>
	LCD_displayString("ERROR....");
    282c:	87 ed       	ldi	r24, 0xD7	; 215
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_displayString>

	seconds=0;
    2834:	10 92 fb 00 	sts	0x00FB, r1
    2838:	10 92 fa 00 	sts	0x00FA, r1
	while(seconds<60);
    283c:	80 91 fa 00 	lds	r24, 0x00FA
    2840:	90 91 fb 00 	lds	r25, 0x00FB
    2844:	8c 33       	cpi	r24, 0x3C	; 60
    2846:	91 05       	cpc	r25, r1
    2848:	c8 f3       	brcs	.-14     	; 0x283c <error+0x2a>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <__udivmodsi4>:
    2850:	a1 e2       	ldi	r26, 0x21	; 33
    2852:	1a 2e       	mov	r1, r26
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	fd 01       	movw	r30, r26
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <__udivmodsi4_ep>

0000285c <__udivmodsi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	ee 1f       	adc	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	a2 17       	cp	r26, r18
    2866:	b3 07       	cpc	r27, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	20 f0       	brcs	.+8      	; 0x2876 <__udivmodsi4_ep>
    286e:	a2 1b       	sub	r26, r18
    2870:	b3 0b       	sbc	r27, r19
    2872:	e4 0b       	sbc	r30, r20
    2874:	f5 0b       	sbc	r31, r21

00002876 <__udivmodsi4_ep>:
    2876:	66 1f       	adc	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	1a 94       	dec	r1
    2880:	69 f7       	brne	.-38     	; 0x285c <__udivmodsi4_loop>
    2882:	60 95       	com	r22
    2884:	70 95       	com	r23
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	bd 01       	movw	r22, r26
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret

00002894 <__prologue_saves__>:
    2894:	2f 92       	push	r2
    2896:	3f 92       	push	r3
    2898:	4f 92       	push	r4
    289a:	5f 92       	push	r5
    289c:	6f 92       	push	r6
    289e:	7f 92       	push	r7
    28a0:	8f 92       	push	r8
    28a2:	9f 92       	push	r9
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	ca 1b       	sub	r28, r26
    28be:	db 0b       	sbc	r29, r27
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	09 94       	ijmp

000028cc <__epilogue_restores__>:
    28cc:	2a 88       	ldd	r2, Y+18	; 0x12
    28ce:	39 88       	ldd	r3, Y+17	; 0x11
    28d0:	48 88       	ldd	r4, Y+16	; 0x10
    28d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28da:	9b 84       	ldd	r9, Y+11	; 0x0b
    28dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    28de:	b9 84       	ldd	r11, Y+9	; 0x09
    28e0:	c8 84       	ldd	r12, Y+8	; 0x08
    28e2:	df 80       	ldd	r13, Y+7	; 0x07
    28e4:	ee 80       	ldd	r14, Y+6	; 0x06
    28e6:	fd 80       	ldd	r15, Y+5	; 0x05
    28e8:	0c 81       	ldd	r16, Y+4	; 0x04
    28ea:	1b 81       	ldd	r17, Y+3	; 0x03
    28ec:	aa 81       	ldd	r26, Y+2	; 0x02
    28ee:	b9 81       	ldd	r27, Y+1	; 0x01
    28f0:	ce 0f       	add	r28, r30
    28f2:	d1 1d       	adc	r29, r1
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	ed 01       	movw	r28, r26
    2900:	08 95       	ret

00002902 <itoa>:
    2902:	fb 01       	movw	r30, r22
    2904:	9f 01       	movw	r18, r30
    2906:	e8 94       	clt
    2908:	42 30       	cpi	r20, 0x02	; 2
    290a:	c4 f0       	brlt	.+48     	; 0x293c <itoa+0x3a>
    290c:	45 32       	cpi	r20, 0x25	; 37
    290e:	b4 f4       	brge	.+44     	; 0x293c <itoa+0x3a>
    2910:	4a 30       	cpi	r20, 0x0A	; 10
    2912:	29 f4       	brne	.+10     	; 0x291e <itoa+0x1c>
    2914:	97 fb       	bst	r25, 7
    2916:	1e f4       	brtc	.+6      	; 0x291e <itoa+0x1c>
    2918:	90 95       	com	r25
    291a:	81 95       	neg	r24
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	64 2f       	mov	r22, r20
    2920:	77 27       	eor	r23, r23
    2922:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    2926:	80 5d       	subi	r24, 0xD0	; 208
    2928:	8a 33       	cpi	r24, 0x3A	; 58
    292a:	0c f0       	brlt	.+2      	; 0x292e <itoa+0x2c>
    292c:	89 5d       	subi	r24, 0xD9	; 217
    292e:	81 93       	st	Z+, r24
    2930:	cb 01       	movw	r24, r22
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	a1 f7       	brne	.-24     	; 0x291e <itoa+0x1c>
    2936:	16 f4       	brtc	.+4      	; 0x293c <itoa+0x3a>
    2938:	5d e2       	ldi	r21, 0x2D	; 45
    293a:	51 93       	st	Z+, r21
    293c:	10 82       	st	Z, r1
    293e:	c9 01       	movw	r24, r18
    2940:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <strrev>

00002944 <strrev>:
    2944:	dc 01       	movw	r26, r24
    2946:	fc 01       	movw	r30, r24
    2948:	67 2f       	mov	r22, r23
    294a:	71 91       	ld	r23, Z+
    294c:	77 23       	and	r23, r23
    294e:	e1 f7       	brne	.-8      	; 0x2948 <strrev+0x4>
    2950:	32 97       	sbiw	r30, 0x02	; 2
    2952:	04 c0       	rjmp	.+8      	; 0x295c <strrev+0x18>
    2954:	7c 91       	ld	r23, X
    2956:	6d 93       	st	X+, r22
    2958:	70 83       	st	Z, r23
    295a:	62 91       	ld	r22, -Z
    295c:	ae 17       	cp	r26, r30
    295e:	bf 07       	cpc	r27, r31
    2960:	c8 f3       	brcs	.-14     	; 0x2954 <strrev+0x10>
    2962:	08 95       	ret

00002964 <__udivmodhi4>:
    2964:	aa 1b       	sub	r26, r26
    2966:	bb 1b       	sub	r27, r27
    2968:	51 e1       	ldi	r21, 0x11	; 17
    296a:	07 c0       	rjmp	.+14     	; 0x297a <__udivmodhi4_ep>

0000296c <__udivmodhi4_loop>:
    296c:	aa 1f       	adc	r26, r26
    296e:	bb 1f       	adc	r27, r27
    2970:	a6 17       	cp	r26, r22
    2972:	b7 07       	cpc	r27, r23
    2974:	10 f0       	brcs	.+4      	; 0x297a <__udivmodhi4_ep>
    2976:	a6 1b       	sub	r26, r22
    2978:	b7 0b       	sbc	r27, r23

0000297a <__udivmodhi4_ep>:
    297a:	88 1f       	adc	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	5a 95       	dec	r21
    2980:	a9 f7       	brne	.-22     	; 0x296c <__udivmodhi4_loop>
    2982:	80 95       	com	r24
    2984:	90 95       	com	r25
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	08 95       	ret

0000298c <_exit>:
    298c:	f8 94       	cli

0000298e <__stop_program>:
    298e:	ff cf       	rjmp	.-2      	; 0x298e <__stop_program>
