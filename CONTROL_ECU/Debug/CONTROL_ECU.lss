
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002294  00002328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080017a  0080017a  00002442  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00002444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001791  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006209  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000063c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000065dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <main>
      8a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 35 11 	jmp	0x226a	; 0x226a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 36 11 	jmp	0x226c	; 0x226c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 35 11 	jmp	0x226a	; 0x226a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_13>:
#include <avr/io.h>
#include <avr/interrupt.h>

static volatile void (*g_ptr)(uint8)=0;

ISR(USART_RXC_vect){
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=0){
     f14:	80 91 7a 01 	lds	r24, 0x017A
     f18:	90 91 7b 01 	lds	r25, 0x017B
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	41 f0       	breq	.+16     	; 0xf30 <__vector_13+0x46>
		g_ptr(UDR);
     f20:	e0 91 7a 01 	lds	r30, 0x017A
     f24:	f0 91 7b 01 	lds	r31, 0x017B
     f28:	ac e2       	ldi	r26, 0x2C	; 44
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	8c 91       	ld	r24, X
     f2e:	09 95       	icall
	}
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <UART_init>:

/*
 * initialization for UART Driver
 * set RX interrupt or polling as req
 */
void UART_init(const UART_ConfigType *configuration) {
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <UART_init+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <UART_init+0x8>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = 0;
     f66:	eb e2       	ldi	r30, 0x2B	; 43
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	10 82       	st	Z, r1

	/* reduce the divisor of the baud rate divider from 16 to 8 */
	SET_BIT(UCSRA, U2X);
     f6c:	ab e2       	ldi	r26, 0x2B	; 43
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	eb e2       	ldi	r30, 0x2B	; 43
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	8c 93       	st	X, r24

	/* set RX interrupt or polling as required */
	MAKE_BIT(UCSRB, RXCIE, configuration->RX_completeInerrupt);
     f7a:	aa e2       	ldi	r26, 0x2A	; 42
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ea e2       	ldi	r30, 0x2A	; 42
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	28 2f       	mov	r18, r24
     f86:	2f 77       	andi	r18, 0x7F	; 127
     f88:	eb 81       	ldd	r30, Y+3	; 0x03
     f8a:	fc 81       	ldd	r31, Y+4	; 0x04
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	96 95       	lsr	r25
     f94:	98 2f       	mov	r25, r24
     f96:	88 27       	eor	r24, r24
     f98:	97 95       	ror	r25
     f9a:	87 95       	ror	r24
     f9c:	82 2b       	or	r24, r18
     f9e:	8c 93       	st	X, r24

	/* enable rx and tx */
	SET_BIT(UCSRB, RXEN);
     fa0:	aa e2       	ldi	r26, 0x2A	; 42
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ea e2       	ldi	r30, 0x2A	; 42
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 61       	ori	r24, 0x10	; 16
     fac:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
     fae:	aa e2       	ldi	r26, 0x2A	; 42
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ea e2       	ldi	r30, 0x2A	; 42
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 60       	ori	r24, 0x08	; 8
     fba:	8c 93       	st	X, r24

	/* set this bit to write into UCSRC */
	SET_BIT(UCSRC, URSEL);
     fbc:	a0 e4       	ldi	r26, 0x40	; 64
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e0 e4       	ldi	r30, 0x40	; 64
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24

	/* set error parity as required */
	UCSRC = (UCSRC & 0xcf) | (configuration->parity << 4);
     fca:	a0 e4       	ldi	r26, 0x40	; 64
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e0 e4       	ldi	r30, 0x40	; 64
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	2f 7c       	andi	r18, 0xCF	; 207
     fd8:	eb 81       	ldd	r30, Y+3	; 0x03
     fda:	fc 81       	ldd	r31, Y+4	; 0x04
     fdc:	81 81       	ldd	r24, Z+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	82 95       	swap	r24
     fe4:	92 95       	swap	r25
     fe6:	90 7f       	andi	r25, 0xF0	; 240
     fe8:	98 27       	eor	r25, r24
     fea:	80 7f       	andi	r24, 0xF0	; 240
     fec:	98 27       	eor	r25, r24
     fee:	82 2b       	or	r24, r18
     ff0:	8c 93       	st	X, r24

	/* set stop bit as required */
	MAKE_BIT(UCSRC, USBS, configuration->stop_bit);
     ff2:	a0 e4       	ldi	r26, 0x40	; 64
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	27 7f       	andi	r18, 0xF7	; 247
    1000:	eb 81       	ldd	r30, Y+3	; 0x03
    1002:	fc 81       	ldd	r31, Y+4	; 0x04
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 2b       	or	r24, r18
    1018:	8c 93       	st	X, r24

	/* set data BITs */
	UCSRC = (UCSRC & 0xf9) | ((configuration->bit_data & 3) << 1);
    101a:	a0 e4       	ldi	r26, 0x40	; 64
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e0 e4       	ldi	r30, 0x40	; 64
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	29 7f       	andi	r18, 0xF9	; 249
    1028:	eb 81       	ldd	r30, Y+3	; 0x03
    102a:	fc 81       	ldd	r31, Y+4	; 0x04
    102c:	83 81       	ldd	r24, Z+3	; 0x03
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	83 70       	andi	r24, 0x03	; 3
    1034:	90 70       	andi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	82 2b       	or	r24, r18
    103c:	8c 93       	st	X, r24

	/* set baud rate as required */
	UBRRL=0;
    103e:	e9 e2       	ldi	r30, 0x29	; 41
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	10 82       	st	Z, r1
	uint16 baudRate = F_CPU / (8UL * configuration->baud_rate) - 1;
    1044:	eb 81       	ldd	r30, Y+3	; 0x03
    1046:	fc 81       	ldd	r31, Y+4	; 0x04
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	95 81       	ldd	r25, Z+5	; 0x05
    104c:	cc 01       	movw	r24, r24
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	aa 1f       	adc	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	aa 1f       	adc	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	aa 1f       	adc	r26, r26
    1068:	bb 1f       	adc	r27, r27
    106a:	9c 01       	movw	r18, r24
    106c:	ad 01       	movw	r20, r26
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	92 e1       	ldi	r25, 0x12	; 18
    1072:	aa e7       	ldi	r26, 0x7A	; 122
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 ef 10 	call	0x21de	; 0x21de <__udivmodsi4>
    107e:	da 01       	movw	r26, r20
    1080:	c9 01       	movw	r24, r18
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(baudRate&0x00ff);
    1088:	e9 e2       	ldi	r30, 0x29	; 41
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	80 83       	st	Z, r24
	UBRRH=baudRate>>8;
    1090:	e0 e4       	ldi	r30, 0x40	; 64
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	89 2f       	mov	r24, r25
    109a:	99 27       	eor	r25, r25
    109c:	80 83       	st	Z, r24
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <UART_sendByte>:

/*
 * send data using UART serial communication
 */
void UART_sendByte(uint8 data) {
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    10b8:	eb e2       	ldi	r30, 0x2B	; 43
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	80 72       	andi	r24, 0x20	; 32
    10c4:	90 70       	andi	r25, 0x00	; 0
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	b9 f3       	breq	.-18     	; 0x10b8 <UART_sendByte+0xc>
	UDR = data;
    10ca:	ec e2       	ldi	r30, 0x2C	; 44
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	80 83       	st	Z, r24
}
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <UART_recieveByte>:

/*
 * recieve data form UART using polling method
 */
uint8 UART_recieveByte() {
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC));
    10e2:	eb e2       	ldi	r30, 0x2B	; 43
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	dc f7       	brge	.-10     	; 0x10e2 <UART_recieveByte+0x8>
	SET_BIT(UCSRA,RXC);
    10ec:	ab e2       	ldi	r26, 0x2B	; 43
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	eb e2       	ldi	r30, 0x2B	; 43
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	8c 93       	st	X, r24
	return UDR;
    10fa:	ec e2       	ldi	r30, 0x2C	; 44
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <UART_sendString>:

/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <UART_sendString+0x6>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	0a c0       	rjmp	.+20     	; 0x112a <UART_sendString+0x24>
	while (*str != '\0') {
		UART_sendByte(*str);
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	80 81       	ld	r24, Z
    111c:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
		str++;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
	while (*str != '\0') {
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	80 81       	ld	r24, Z
    1130:	88 23       	and	r24, r24
    1132:	89 f7       	brne	.-30     	; 0x1116 <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
	UART_sendByte('#');
    1134:	83 e2       	ldi	r24, 0x23	; 35
    1136:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <UART_recieveString>:

/*
 * recieve string using UART polling msethod
 * warning -> this function should be sync with the sender to avoid overwrite
 */
void UART_recieveString(uint8 *str) {
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <UART_recieveString+0x6>
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
	do {
		*str = UART_recieveByte();
    1154:	0e 94 6d 08 	call	0x10da	; 0x10da <UART_recieveByte>
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
	} while (*str++ != '#');
    115e:	e9 81       	ldd	r30, Y+1	; 0x01
    1160:	fa 81       	ldd	r31, Y+2	; 0x02
    1162:	80 81       	ld	r24, Z
    1164:	1b 82       	std	Y+3, r1	; 0x03
    1166:	83 32       	cpi	r24, 0x23	; 35
    1168:	11 f0       	breq	.+4      	; 0x116e <UART_recieveString+0x2a>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 23       	and	r24, r24
    117c:	59 f7       	brne	.-42     	; 0x1154 <UART_recieveString+0x10>
	*(str - 1) = '\0';
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	10 82       	st	Z, r1
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <UART_setCallBack>:

/*
 * save the address of callback functiom
 */
void UART_setCallBack(void(*f_ptr)(uint8)){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <UART_setCallBack+0x6>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=f_ptr;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	90 93 7b 01 	sts	0x017B, r25
    11aa:	80 93 7a 01 	sts	0x017A, r24
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <TWI_init>:
 *	set TWPS to 00
 *	configure division factor for the bit rate generator
 *	give the address of slave
 *	enable module
 */
void TWI_init(const TWI_ConfigType* configuration) {
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <TWI_init+0xa>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
	/* set TWPS to 00 */
	TWSR = 0;
    11ca:	e1 e2       	ldi	r30, 0x21	; 33
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	10 82       	st	Z, r1

	/* configure division factor for the bit rate generator */
	TWBR = (uint8)((F_CPU/(float64)(2*configuration->bit_rate))-8);
    11d0:	00 e2       	ldi	r16, 0x20	; 32
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	a2 81       	ldd	r26, Z+2	; 0x02
    11de:	b3 81       	ldd	r27, Z+3	; 0x03
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	74 e2       	ldi	r23, 0x24	; 36
    11f8:	84 ef       	ldi	r24, 0xF4	; 244
    11fa:	9a e4       	ldi	r25, 0x4A	; 74
    11fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	f8 01       	movw	r30, r16
    1226:	80 83       	st	Z, r24

	/* give the address of slave */
	TWAR = configuration->address;
    1228:	a2 e2       	ldi	r26, 0x22	; 34
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 81       	ldd	r30, Y+1	; 0x01
    122e:	fa 81       	ldd	r31, Y+2	; 0x02
    1230:	84 81       	ldd	r24, Z+4	; 0x04
    1232:	8c 93       	st	X, r24

	/* enable module */
	TWCR = (1 << TWEN);
    1234:	e6 e5       	ldi	r30, 0x56	; 86
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	80 83       	st	Z, r24
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <TWI_start>:

/*
 * send start bit to start the communication
 */
void TWI_start(void) {
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear interrupt flag
	 * send start bit
	 * enable module
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1252:	e6 e5       	ldi	r30, 0x56	; 86
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	84 ea       	ldi	r24, 0xA4	; 164
    1258:	80 83       	st	Z, r24

	/* waiting until (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    125a:	e6 e5       	ldi	r30, 0x56	; 86
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 23       	and	r24, r24
    1262:	dc f7       	brge	.-10     	; 0x125a <TWI_start+0x10>
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <TWI_stop>:

/*
 * send stop bit to end the communication
 */
void TWI_stop(void) {
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear interrupt flag
	 * send end bit
	 * enable module
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1272:	e6 e5       	ldi	r30, 0x56	; 86
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	84 e9       	ldi	r24, 0x94	; 148
    1278:	80 83       	st	Z, r24
	/* if u make polling here it will stuck because hardware willn't recieve any action after sending stop bit */
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <TWI_writeByte>:

/*
 * send byte in SDA
 */
void TWI_writeByte(uint8 data) {
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
	/* write data into data register */
	TWDR = data;
    128c:	e3 e2       	ldi	r30, 0x23	; 35
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	80 83       	st	Z, r24

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1294:	e6 e5       	ldi	r30, 0x56	; 86
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	84 e8       	ldi	r24, 0x84	; 132
    129a:	80 83       	st	Z, r24

	/* waiting until data send successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    129c:	e6 e5       	ldi	r30, 0x56	; 86
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 23       	and	r24, r24
    12a4:	dc f7       	brge	.-10     	; 0x129c <TWI_writeByte+0x1c>
}
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <TWI_readByteWithACK>:

/*
 * -read one byte
 * -send ACK
 */
uint8 TWI_readByteWithACK(void) {
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1 << TWINT)  | (1 << TWEN);
    12b8:	e6 e5       	ldi	r30, 0x56	; 86
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	84 e8       	ldi	r24, 0x84	; 132
    12be:	80 83       	st	Z, r24

	/* waiting until we recieve byte */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12c0:	e6 e5       	ldi	r30, 0x56	; 86
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 23       	and	r24, r24
    12c8:	dc f7       	brge	.-10     	; 0x12c0 <TWI_readByteWithACK+0x12>

	data=TWDR;
    12ca:	e3 e2       	ldi	r30, 0x23	; 35
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	89 83       	std	Y+1, r24	; 0x01

	/* send ACK and enable TWI and clear the flag */
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    12d2:	e6 e5       	ldi	r30, 0x56	; 86
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	84 ec       	ldi	r24, 0xC4	; 196
    12d8:	80 83       	st	Z, r24

	/* waiting until ACK send successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12da:	e6 e5       	ldi	r30, 0x56	; 86
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	88 23       	and	r24, r24
    12e2:	dc f7       	brge	.-10     	; 0x12da <TWI_readByteWithACK+0x2c>

	return data;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TWI_readByteWithNACK>:

/*
 * -read one byte
 * -send NACK to end the communication
 */
uint8 TWI_readByteWithNACK(void) {
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1 << TWINT)  | (1 << TWEN);
    12f6:	e6 e5       	ldi	r30, 0x56	; 86
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	84 e8       	ldi	r24, 0x84	; 132
    12fc:	80 83       	st	Z, r24

	/* waiting until we recieve byte */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	dc f7       	brge	.-10     	; 0x12fe <TWI_readByteWithNACK+0x10>

	return TWDR;
    1308:	e3 e2       	ldi	r30, 0x23	; 35
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TWI_getStatus>:

/*
 * get the status to confirm the action
 */
uint8 TWI_getStatus(void) {
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & (0xf8));
    131c:	e1 e2       	ldi	r30, 0x21	; 33
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 7f       	andi	r24, 0xF8	; 248
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <PWM_Timer0_Start>:
 * -Setup the compare value based on the required input duty cycle
 * -Setup the direction for OC0 as output pin through the GPIO driver.
 * -The generated PWM signal frequency will be 500Hz to control the DC
 *		Motor speed.
*/
void PWM_Timer0_Start(uint8 duty_cycle){
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
	 * WGM01=WGM00=1 	fast PWM
	 * COM01=1 			(nin-inverting mode)
	 * CS01=1			Setup the prescaler with F_CPU/8.
	 */

	TCCR0 =(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01);
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8a e6       	ldi	r24, 0x6A	; 106
    1340:	80 83       	st	Z, r24

	/* configure oc0 as output pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	63 e0       	ldi	r22, 0x03	; 3
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	0e 94 af 0a 	call	0x155e	; 0x155e <GPIO_setupPinDirection>

	/* setup the speed of motor  */
	OCR0=(duty_cycle/100.0)*255;
    134c:	0c e5       	ldi	r16, 0x5C	; 92
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	aa 27       	eor	r26, r26
    1358:	97 fd       	sbrc	r25, 7
    135a:	a0 95       	com	r26
    135c:	ba 2f       	mov	r27, r26
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	48 ec       	ldi	r20, 0xC8	; 200
    1374:	52 e4       	ldi	r21, 0x42	; 66
    1376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	53 e4       	ldi	r21, 0x43	; 67
    138a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	f8 01       	movw	r30, r16
    13a0:	80 83       	st	Z, r24
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile static void (*g_ptr)(void)=NULL;

ISR(TIMER1_COMPA_vect){
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    13d8:	80 91 7c 01 	lds	r24, 0x017C
    13dc:	90 91 7d 01 	lds	r25, 0x017D
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	29 f0       	breq	.+10     	; 0x13ee <__vector_7+0x40>
		g_ptr();
    13e4:	e0 91 7c 01 	lds	r30, 0x017C
    13e8:	f0 91 7d 01 	lds	r31, 0x017D
    13ec:	09 95       	icall
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    143e:	80 91 7c 01 	lds	r24, 0x017C
    1442:	90 91 7d 01 	lds	r25, 0x017D
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_9+0x40>
		g_ptr();
    144a:	e0 91 7c 01 	lds	r30, 0x017C
    144e:	f0 91 7d 01 	lds	r31, 0x017D
    1452:	09 95       	icall
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <Timer1_init>:

/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Timer1_init+0x6>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8c e0       	ldi	r24, 0x0C	; 12
    148e:	80 83       	st	Z, r24

	/* clear modes */
	TCCR1B &= ~(3 << WGM12);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	87 7e       	andi	r24, 0xE7	; 231
    149c:	8c 93       	st	X, r24

	/* required mode ctc or normal mode */
	if (Config_Ptr->mode == TIMER1_CTC) {
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	85 81       	ldd	r24, Z+5	; 0x05
    14a4:	88 23       	and	r24, r24
    14a6:	b9 f4       	brne	.+46     	; 0x14d6 <Timer1_init+0x5c>
		OCR1A = Config_Ptr->compare_value;
    14a8:	aa e4       	ldi	r26, 0x4A	; 74
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B, WGM12);
    14ba:	ae e4       	ldi	r26, 0x4E	; 78
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ee e4       	ldi	r30, 0x4E	; 78
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	88 60       	ori	r24, 0x08	; 8
    14c6:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    14c8:	a9 e5       	ldi	r26, 0x59	; 89
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e9 e5       	ldi	r30, 0x59	; 89
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 61       	ori	r24, 0x10	; 16
    14d4:	8c 93       	st	X, r24
	}
	/* set the initial counter for timer */
	TCNT1 = Config_Ptr->initial_value;
    14d6:	ac e4       	ldi	r26, 0x4C	; 76
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24

	/* configure timer 1 prescaler and start it  */
	TCCR1B = (TCCR1B & 0xf8) | (Config_Ptr->prescaler);
    14e8:	ae e4       	ldi	r26, 0x4E	; 78
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ee e4       	ldi	r30, 0x4E	; 78
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	98 2f       	mov	r25, r24
    14f4:	98 7f       	andi	r25, 0xF8	; 248
    14f6:	e9 81       	ldd	r30, Y+1	; 0x01
    14f8:	fa 81       	ldd	r31, Y+2	; 0x02
    14fa:	84 81       	ldd	r24, Z+4	; 0x04
    14fc:	89 2b       	or	r24, r25
    14fe:	8c 93       	st	X, r24

}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1512:	ef e4       	ldi	r30, 0x4F	; 79
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	10 82       	st	Z, r1
	TCCR1B &= ~(3 << WGM12);
    1518:	ae e4       	ldi	r26, 0x4E	; 78
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ee e4       	ldi	r30, 0x4E	; 78
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	87 7e       	andi	r24, 0xE7	; 231
    1524:	8c 93       	st	X, r24
	TCCR1B &= 0xf8;
    1526:	ae e4       	ldi	r26, 0x4E	; 78
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 7f       	andi	r24, 0xF8	; 248
    1532:	8c 93       	st	X, r24
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <Timer1_setCallBack+0x6>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	90 93 7d 01 	sts	0x017D, r25
    1550:	80 93 7c 01 	sts	0x017C, r24
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_setupPinDirection+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_setupPinDirection+0x8>
    1566:	0f 92       	push	r0
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02
    1570:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	08 f0       	brcs	.+2      	; 0x157a <GPIO_setupPinDirection+0x1c>
    1578:	d5 c0       	rjmp	.+426    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	08 f0       	brcs	.+2      	; 0x1582 <GPIO_setupPinDirection+0x24>
    1580:	d1 c0       	rjmp	.+418    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3d 83       	std	Y+5, r19	; 0x05
    158a:	2c 83       	std	Y+4, r18	; 0x04
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <GPIO_setupPinDirection+0x3a>
    1596:	43 c0       	rjmp	.+134    	; 0x161e <GPIO_setupPinDirection+0xc0>
    1598:	2c 81       	ldd	r18, Y+4	; 0x04
    159a:	3d 81       	ldd	r19, Y+5	; 0x05
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	2c f4       	brge	.+10     	; 0x15ac <GPIO_setupPinDirection+0x4e>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <GPIO_setupPinDirection+0x68>
    15aa:	bc c0       	rjmp	.+376    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
    15ac:	2c 81       	ldd	r18, Y+4	; 0x04
    15ae:	3d 81       	ldd	r19, Y+5	; 0x05
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <GPIO_setupPinDirection+0x5a>
    15b6:	5f c0       	rjmp	.+190    	; 0x1676 <GPIO_setupPinDirection+0x118>
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <GPIO_setupPinDirection+0x66>
    15c2:	85 c0       	rjmp	.+266    	; 0x16ce <GPIO_setupPinDirection+0x170>
    15c4:	af c0       	rjmp	.+350    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15cc:	aa e3       	ldi	r26, 0x3A	; 58
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ea e3       	ldi	r30, 0x3A	; 58
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_setupPinDirection+0x8c>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_setupPinDirection+0x88>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	98 c0       	rjmp	.+304    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15f4:	aa e3       	ldi	r26, 0x3A	; 58
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ea e3       	ldi	r30, 0x3A	; 58
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0xb4>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0xb0>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	83 c0       	rjmp	.+262    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	a1 f4       	brne	.+40     	; 0x164c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1624:	a7 e3       	ldi	r26, 0x37	; 55
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e7 e3       	ldi	r30, 0x37	; 55
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_setupPinDirection+0xe4>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_setupPinDirection+0xe0>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	6c c0       	rjmp	.+216    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    164c:	a7 e3       	ldi	r26, 0x37	; 55
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0x10c>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0x108>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	57 c0       	rjmp	.+174    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	a1 f4       	brne	.+40     	; 0x16a4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    167c:	a4 e3       	ldi	r26, 0x34	; 52
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e4 e3       	ldi	r30, 0x34	; 52
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_setupPinDirection+0x13c>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_setupPinDirection+0x138>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	40 c0       	rjmp	.+128    	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16a4:	a4 e3       	ldi	r26, 0x34	; 52
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e4 e3       	ldi	r30, 0x34	; 52
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0x164>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0x160>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	2b c0       	rjmp	.+86     	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_setupPinDirection+0x194>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_setupPinDirection+0x190>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16fc:	a1 e3       	ldi	r26, 0x31	; 49
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e1 e3       	ldi	r30, 0x31	; 49
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0x1bc>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0x1b8>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <GPIO_writePin+0x6>
    173a:	00 d0       	rcall	.+0      	; 0x173c <GPIO_writePin+0x8>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	6a 83       	std	Y+2, r22	; 0x02
    1746:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	88 30       	cpi	r24, 0x08	; 8
    174c:	08 f0       	brcs	.+2      	; 0x1750 <GPIO_writePin+0x1c>
    174e:	d5 c0       	rjmp	.+426    	; 0x18fa <GPIO_writePin+0x1c6>
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	08 f0       	brcs	.+2      	; 0x1758 <GPIO_writePin+0x24>
    1756:	d1 c0       	rjmp	.+418    	; 0x18fa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3d 83       	std	Y+5, r19	; 0x05
    1760:	2c 83       	std	Y+4, r18	; 0x04
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <GPIO_writePin+0x3a>
    176c:	43 c0       	rjmp	.+134    	; 0x17f4 <GPIO_writePin+0xc0>
    176e:	2c 81       	ldd	r18, Y+4	; 0x04
    1770:	3d 81       	ldd	r19, Y+5	; 0x05
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	2c f4       	brge	.+10     	; 0x1782 <GPIO_writePin+0x4e>
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	71 f0       	breq	.+28     	; 0x179c <GPIO_writePin+0x68>
    1780:	bc c0       	rjmp	.+376    	; 0x18fa <GPIO_writePin+0x1c6>
    1782:	2c 81       	ldd	r18, Y+4	; 0x04
    1784:	3d 81       	ldd	r19, Y+5	; 0x05
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <GPIO_writePin+0x5a>
    178c:	5f c0       	rjmp	.+190    	; 0x184c <GPIO_writePin+0x118>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <GPIO_writePin+0x66>
    1798:	85 c0       	rjmp	.+266    	; 0x18a4 <GPIO_writePin+0x170>
    179a:	af c0       	rjmp	.+350    	; 0x18fa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17a2:	ab e3       	ldi	r26, 0x3B	; 59
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e3       	ldi	r30, 0x3B	; 59
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_writePin+0x8c>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_writePin+0x88>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	98 c0       	rjmp	.+304    	; 0x18fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0xb4>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0xb0>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	83 c0       	rjmp	.+262    	; 0x18fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	a1 f4       	brne	.+40     	; 0x1822 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_writePin+0xe4>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_writePin+0xe0>
    181c:	84 2b       	or	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	6c c0       	rjmp	.+216    	; 0x18fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0x10c>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0x108>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	57 c0       	rjmp	.+174    	; 0x18fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	a1 f4       	brne	.+40     	; 0x187a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1852:	a5 e3       	ldi	r26, 0x35	; 53
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_writePin+0x13c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_writePin+0x138>
    1874:	84 2b       	or	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	40 c0       	rjmp	.+128    	; 0x18fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    187a:	a5 e3       	ldi	r26, 0x35	; 53
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0x164>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0x160>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	2b c0       	rjmp	.+86     	; 0x18fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	a1 f4       	brne	.+40     	; 0x18d2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_writePin+0x194>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_writePin+0x190>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18d2:	a2 e3       	ldi	r26, 0x32	; 50
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e2 e3       	ldi	r30, 0x32	; 50
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0x1bc>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0x1b8>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <GPIO_readPin+0x6>
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_readPin+0x8>
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    191c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	88 30       	cpi	r24, 0x08	; 8
    1922:	08 f0       	brcs	.+2      	; 0x1926 <GPIO_readPin+0x1c>
    1924:	84 c0       	rjmp	.+264    	; 0x1a2e <GPIO_readPin+0x124>
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f0       	brcs	.+2      	; 0x192e <GPIO_readPin+0x24>
    192c:	80 c0       	rjmp	.+256    	; 0x1a2e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3d 83       	std	Y+5, r19	; 0x05
    1936:	2c 83       	std	Y+4, r18	; 0x04
    1938:	4c 81       	ldd	r20, Y+4	; 0x04
    193a:	5d 81       	ldd	r21, Y+5	; 0x05
    193c:	41 30       	cpi	r20, 0x01	; 1
    193e:	51 05       	cpc	r21, r1
    1940:	79 f1       	breq	.+94     	; 0x19a0 <GPIO_readPin+0x96>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	91 05       	cpc	r25, r1
    194a:	34 f4       	brge	.+12     	; 0x1958 <GPIO_readPin+0x4e>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	21 15       	cp	r18, r1
    1952:	31 05       	cpc	r19, r1
    1954:	69 f0       	breq	.+26     	; 0x1970 <GPIO_readPin+0x66>
    1956:	6b c0       	rjmp	.+214    	; 0x1a2e <GPIO_readPin+0x124>
    1958:	4c 81       	ldd	r20, Y+4	; 0x04
    195a:	5d 81       	ldd	r21, Y+5	; 0x05
    195c:	42 30       	cpi	r20, 0x02	; 2
    195e:	51 05       	cpc	r21, r1
    1960:	b9 f1       	breq	.+110    	; 0x19d0 <GPIO_readPin+0xc6>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <GPIO_readPin+0x64>
    196c:	49 c0       	rjmp	.+146    	; 0x1a00 <GPIO_readPin+0xf6>
    196e:	5f c0       	rjmp	.+190    	; 0x1a2e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1970:	e9 e3       	ldi	r30, 0x39	; 57
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a9 01       	movw	r20, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_readPin+0x7e>
    1984:	55 95       	asr	r21
    1986:	47 95       	ror	r20
    1988:	8a 95       	dec	r24
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_readPin+0x7a>
    198c:	ca 01       	movw	r24, r20
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	19 f0       	breq	.+6      	; 0x199c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	49 c0       	rjmp	.+146    	; 0x1a2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    199c:	19 82       	std	Y+1, r1	; 0x01
    199e:	47 c0       	rjmp	.+142    	; 0x1a2e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19a0:	e6 e3       	ldi	r30, 0x36	; 54
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_readPin+0xae>
    19b4:	55 95       	asr	r21
    19b6:	47 95       	ror	r20
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_readPin+0xaa>
    19bc:	ca 01       	movw	r24, r20
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	19 f0       	breq	.+6      	; 0x19cc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	31 c0       	rjmp	.+98     	; 0x1a2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	2f c0       	rjmp	.+94     	; 0x1a2e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19d0:	e3 e3       	ldi	r30, 0x33	; 51
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_readPin+0xde>
    19e4:	55 95       	asr	r21
    19e6:	47 95       	ror	r20
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_readPin+0xda>
    19ec:	ca 01       	movw	r24, r20
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	19 f0       	breq	.+6      	; 0x19fc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	19 c0       	rjmp	.+50     	; 0x1a2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fc:	19 82       	std	Y+1, r1	; 0x01
    19fe:	17 c0       	rjmp	.+46     	; 0x1a2e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a00:	e0 e3       	ldi	r30, 0x30	; 48
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_readPin+0x10e>
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	8a 95       	dec	r24
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_readPin+0x10a>
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	19 f0       	breq	.+6      	; 0x1a2c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_setupPortDirection+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_setupPortDirection+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	90 f5       	brcc	.+100    	; 0x1aba <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3c 83       	std	Y+4, r19	; 0x04
    1a5e:	2b 83       	std	Y+3, r18	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	d1 f0       	breq	.+52     	; 0x1a9e <GPIO_setupPortDirection+0x5e>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <GPIO_setupPortDirection+0x3e>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <GPIO_setupPortDirection+0x54>
    1a7c:	1e c0       	rjmp	.+60     	; 0x1aba <GPIO_setupPortDirection+0x7a>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <GPIO_setupPortDirection+0x68>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <GPIO_setupPortDirection+0x72>
    1a92:	13 c0       	rjmp	.+38     	; 0x1aba <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a94:	ea e3       	ldi	r30, 0x3A	; 58
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	80 83       	st	Z, r24
    1a9c:	0e c0       	rjmp	.+28     	; 0x1aba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a9e:	e7 e3       	ldi	r30, 0x37	; 55
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 83       	st	Z, r24
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1aa8:	e4 e3       	ldi	r30, 0x34	; 52
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	80 83       	st	Z, r24
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ab2:	e1 e3       	ldi	r30, 0x31	; 49
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_writePort+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <GPIO_writePort+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	84 30       	cpi	r24, 0x04	; 4
    1adc:	90 f5       	brcc	.+100    	; 0x1b42 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3c 83       	std	Y+4, r19	; 0x04
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	d1 f0       	breq	.+52     	; 0x1b26 <GPIO_writePort+0x5e>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <GPIO_writePort+0x3e>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <GPIO_writePort+0x54>
    1b04:	1e c0       	rjmp	.+60     	; 0x1b42 <GPIO_writePort+0x7a>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <GPIO_writePort+0x68>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <GPIO_writePort+0x72>
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	80 83       	st	Z, r24
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	80 83       	st	Z, r24
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b30:	e5 e3       	ldi	r30, 0x35	; 53
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	80 83       	st	Z, r24
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b3a:	e2 e3       	ldi	r30, 0x32	; 50
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPIO_readPort+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <GPIO_readPort+0x8>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b5e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	90 f5       	brcc	.+100    	; 0x1bca <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3c 83       	std	Y+4, r19	; 0x04
    1b6e:	2b 83       	std	Y+3, r18	; 0x03
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	d1 f0       	breq	.+52     	; 0x1bae <GPIO_readPort+0x5e>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <GPIO_readPort+0x3e>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <GPIO_readPort+0x54>
    1b8c:	1e c0       	rjmp	.+60     	; 0x1bca <GPIO_readPort+0x7a>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <GPIO_readPort+0x68>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	81 f0       	breq	.+32     	; 0x1bc2 <GPIO_readPort+0x72>
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ba4:	e9 e3       	ldi	r30, 0x39	; 57
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	0e c0       	rjmp	.+28     	; 0x1bca <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bae:	e6 e3       	ldi	r30, 0x36	; 54
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bb8:	e3 e3       	ldi	r30, 0x33	; 51
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bc2:	e0 e3       	ldi	r30, 0x30	; 48
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <EEPROM_writeByte>:

/*
 * write one byte into specific address to External EEPROM using TWI
 * single meesage
 */
uint8 EEPROM_writeByte(uint16 address, uint8 *data) {
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <EEPROM_writeByte+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EEPROM_writeByte+0x8>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <EEPROM_writeByte+0xa>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	8a 83       	std	Y+2, r24	; 0x02
    1bec:	7d 83       	std	Y+5, r23	; 0x05
    1bee:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* first take the control of TWI drive */
	TWI_start();
    1bf0:	0e 94 25 09 	call	0x124a	; 0x124a <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1bf4:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1bf8:	88 30       	cpi	r24, 0x08	; 8
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <EEPROM_writeByte+0x26>
		return EEPROM_ERROR;
    1bfc:	1e 82       	std	Y+6, r1	; 0x06
    1bfe:	37 c0       	rjmp	.+110    	; 0x1c6e <EEPROM_writeByte+0x94>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * write mode
	*/
	TWI_writeByte((0xa0) | ((address >> 7) & (0x0e)));
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	88 0f       	add	r24, r24
    1c06:	89 2f       	mov	r24, r25
    1c08:	88 1f       	adc	r24, r24
    1c0a:	99 0b       	sbc	r25, r25
    1c0c:	91 95       	neg	r25
    1c0e:	8e 70       	andi	r24, 0x0E	; 14
    1c10:	80 6a       	ori	r24, 0xA0	; 160
    1c12:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c16:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1c1a:	88 31       	cpi	r24, 0x18	; 24
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <EEPROM_writeByte+0x48>
		return EEPROM_ERROR;
    1c1e:	1e 82       	std	Y+6, r1	; 0x06
    1c20:	26 c0       	rjmp	.+76     	; 0x1c6e <EEPROM_writeByte+0x94>

	/* send data contain last bits of the address */
	TWI_writeByte((uint8)address);
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c28:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1c2c:	88 32       	cpi	r24, 0x28	; 40
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <EEPROM_writeByte+0x5a>
		return EEPROM_ERROR;
    1c30:	1e 82       	std	Y+6, r1	; 0x06
    1c32:	1d c0       	rjmp	.+58     	; 0x1c6e <EEPROM_writeByte+0x94>

	/* send data to EEPROM */
	for(i=0;i<5;i++){
    1c34:	19 82       	std	Y+1, r1	; 0x01
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <EEPROM_writeByte+0x7a>
		TWI_writeByte(data[i]);
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	fc 01       	movw	r30, r24
    1c44:	e2 0f       	add	r30, r18
    1c46:	f3 1f       	adc	r31, r19
    1c48:	80 81       	ld	r24, Z
    1c4a:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	TWI_writeByte((uint8)address);
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
		return EEPROM_ERROR;

	/* send data to EEPROM */
	for(i=0;i<5;i++){
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	85 30       	cpi	r24, 0x05	; 5
    1c58:	78 f3       	brcs	.-34     	; 0x1c38 <EEPROM_writeByte+0x5e>
		TWI_writeByte(data[i]);
	}

	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c5a:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1c5e:	88 32       	cpi	r24, 0x28	; 40
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <EEPROM_writeByte+0x8c>
		return EEPROM_ERROR;
    1c62:	1e 82       	std	Y+6, r1	; 0x06
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <EEPROM_writeByte+0x94>

	/* Stop the communication */
	TWI_stop();
    1c66:	0e 94 35 09 	call	0x126a	; 0x126a <TWI_stop>

	return EEPROM_SUCCESS;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	8e 83       	std	Y+6, r24	; 0x06
    1c6e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1c70:	26 96       	adiw	r28, 0x06	; 6
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <EEPROM_readByte>:

/*
 * read one byte from specific address at External EEPROM using TWI
 * combined message
 */
uint8 EEPROM_readByte(uint16 address, uint8 *data) {
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <EEPROM_readByte+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <EEPROM_readByte+0x8>
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	7c 83       	std	Y+4, r23	; 0x04
    1c96:	6b 83       	std	Y+3, r22	; 0x03
	/* first take the control of TWI drive */
	TWI_start();
    1c98:	0e 94 25 09 	call	0x124a	; 0x124a <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1c9c:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	11 f0       	breq	.+4      	; 0x1ca8 <EEPROM_readByte+0x26>
		return EEPROM_ERROR;
    1ca4:	1d 82       	std	Y+5, r1	; 0x05
    1ca6:	3c c0       	rjmp	.+120    	; 0x1d20 <EEPROM_readByte+0x9e>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * write mode
	 */
	TWI_writeByte((0xa0) | ((address >> 7) & (0x0e)));
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	88 0f       	add	r24, r24
    1cae:	89 2f       	mov	r24, r25
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	99 0b       	sbc	r25, r25
    1cb4:	91 95       	neg	r25
    1cb6:	8e 70       	andi	r24, 0x0E	; 14
    1cb8:	80 6a       	ori	r24, 0xA0	; 160
    1cba:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1cbe:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1cc2:	88 31       	cpi	r24, 0x18	; 24
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <EEPROM_readByte+0x48>
		return EEPROM_ERROR;
    1cc6:	1d 82       	std	Y+5, r1	; 0x05
    1cc8:	2b c0       	rjmp	.+86     	; 0x1d20 <EEPROM_readByte+0x9e>

	/* send data contain last bits of the address */
	TWI_writeByte((uint8)address);
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cd0:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1cd4:	88 32       	cpi	r24, 0x28	; 40
    1cd6:	11 f0       	breq	.+4      	; 0x1cdc <EEPROM_readByte+0x5a>
		return EEPROM_ERROR;
    1cd8:	1d 82       	std	Y+5, r1	; 0x05
    1cda:	22 c0       	rjmp	.+68     	; 0x1d20 <EEPROM_readByte+0x9e>

	/* repeated start */
	TWI_start();
    1cdc:	0e 94 25 09 	call	0x124a	; 0x124a <TWI_start>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * read mode
	 */
	TWI_writeByte((0xa1) | ((address >> 7) & (0x0e)));
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	88 0f       	add	r24, r24
    1ce6:	89 2f       	mov	r24, r25
    1ce8:	88 1f       	adc	r24, r24
    1cea:	99 0b       	sbc	r25, r25
    1cec:	91 95       	neg	r25
    1cee:	8e 70       	andi	r24, 0x0E	; 14
    1cf0:	81 6a       	ori	r24, 0xA1	; 161
    1cf2:	0e 94 40 09 	call	0x1280	; 0x1280 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MR_SLA_R_ACK)
    1cf6:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1cfa:	80 34       	cpi	r24, 0x40	; 64
    1cfc:	11 f0       	breq	.+4      	; 0x1d02 <EEPROM_readByte+0x80>
		return EEPROM_ERROR;
    1cfe:	1d 82       	std	Y+5, r1	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <EEPROM_readByte+0x9e>

	/* read data */
	*data = TWI_readByteWithNACK();
    1d02:	0e 94 77 09 	call	0x12ee	; 0x12ee <TWI_readByteWithNACK>
    1d06:	eb 81       	ldd	r30, Y+3	; 0x03
    1d08:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0a:	80 83       	st	Z, r24

	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d0c:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_getStatus>
    1d10:	88 35       	cpi	r24, 0x58	; 88
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <EEPROM_readByte+0x96>
		return EEPROM_ERROR;
    1d14:	1d 82       	std	Y+5, r1	; 0x05
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <EEPROM_readByte+0x9e>

	TWI_stop();
    1d18:	0e 94 35 09 	call	0x126a	; 0x126a <TWI_stop>

	return EEPROM_SUCCESS;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <DcMotor_Init>:
/* 	Description
 * 	-The Function responsible for setup the direction for the two
 *			motor pins through the GPIO driver.
 *	-Stop at the DC-Motor at the beginning through the GPIO driver
*/
void DcMotor_Init(void){
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	/* configuration of IN1 and IN2 pins as output pins */
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 af 0a 	call	0x155e	; 0x155e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 af 0a 	call	0x155e	; 0x155e <GPIO_setupPinDirection>

	/* stop the motor */
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <DcMotor_Rotate>:
 * 	-The function responsible for rotate the DC Motor CW/ or A-CW or
 *			stop the motor based on the state input state value.
 * 	-Send the required duty cycle to the PWM driver based on the
 *			required speed value.
*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <DcMotor_Rotate+0x6>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	0e 94 95 09 	call	0x132a	; 0x132a <PWM_Timer0_Start>
	if(state==CW){
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	59 f4       	brne	.+22     	; 0x1d98 <DcMotor_Rotate+0x30>
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
    1d96:	18 c0       	rjmp	.+48     	; 0x1dc8 <DcMotor_Rotate+0x60>
	}else if(state==ACW){
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	59 f4       	brne	.+22     	; 0x1db4 <DcMotor_Rotate+0x4c>
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
    1db2:	0a c0       	rjmp	.+20     	; 0x1dc8 <DcMotor_Rotate+0x60>
	}else {
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
	}
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <Buzzer_init>:
/*
 * Description:
 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init(){
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 af 0a 	call	0x155e	; 0x155e <GPIO_setupPinDirection>
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <Buzzer_on>:

/*
 * Description:
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID ,LOGIC_HIGH);
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <Buzzer_off>:

/*
 * Description:
 * Function to disable the Buzzer through the GPIO
 */
void Buzzer_off(void){
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID ,LOGIC_LOW);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_writePin>
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <main>:

#include "control_ecu.h"
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/
int main() {
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	ec 97       	sbiw	r28, 0x3c	; 60
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61

	uint8 current_operation, idx, byte, error_flag = 0, password[5],
    1e32:	1f 86       	std	Y+15, r1	; 0x0f
			password_confirmation[5];
	TWI_ConfigType twi = { 400000, 1 };
    1e34:	ce 01       	movw	r24, r28
    1e36:	4d 96       	adiw	r24, 0x1d	; 29
    1e38:	9f a7       	std	Y+47, r25	; 0x2f
    1e3a:	8e a7       	std	Y+46, r24	; 0x2e
    1e3c:	e4 e7       	ldi	r30, 0x74	; 116
    1e3e:	f1 e0       	ldi	r31, 0x01	; 1
    1e40:	f9 ab       	std	Y+49, r31	; 0x31
    1e42:	e8 ab       	std	Y+48, r30	; 0x30
    1e44:	f5 e0       	ldi	r31, 0x05	; 5
    1e46:	fa ab       	std	Y+50, r31	; 0x32
    1e48:	e8 a9       	ldd	r30, Y+48	; 0x30
    1e4a:	f9 a9       	ldd	r31, Y+49	; 0x31
    1e4c:	00 80       	ld	r0, Z
    1e4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1e50:	99 a9       	ldd	r25, Y+49	; 0x31
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	99 ab       	std	Y+49, r25	; 0x31
    1e56:	88 ab       	std	Y+48, r24	; 0x30
    1e58:	ee a5       	ldd	r30, Y+46	; 0x2e
    1e5a:	ff a5       	ldd	r31, Y+47	; 0x2f
    1e5c:	00 82       	st	Z, r0
    1e5e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1e60:	9f a5       	ldd	r25, Y+47	; 0x2f
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	9f a7       	std	Y+47, r25	; 0x2f
    1e66:	8e a7       	std	Y+46, r24	; 0x2e
    1e68:	9a a9       	ldd	r25, Y+50	; 0x32
    1e6a:	91 50       	subi	r25, 0x01	; 1
    1e6c:	9a ab       	std	Y+50, r25	; 0x32
    1e6e:	ea a9       	ldd	r30, Y+50	; 0x32
    1e70:	ee 23       	and	r30, r30
    1e72:	51 f7       	brne	.-44     	; 0x1e48 <main+0x2e>
	Timer1_ConfigType timer1 = { 0, 31250, TIMER1_FRQ256, TIMER1_CTC };
    1e74:	ce 01       	movw	r24, r28
    1e76:	82 96       	adiw	r24, 0x22	; 34
    1e78:	9c ab       	std	Y+52, r25	; 0x34
    1e7a:	8b ab       	std	Y+51, r24	; 0x33
    1e7c:	ee e6       	ldi	r30, 0x6E	; 110
    1e7e:	f1 e0       	ldi	r31, 0x01	; 1
    1e80:	fe ab       	std	Y+54, r31	; 0x36
    1e82:	ed ab       	std	Y+53, r30	; 0x35
    1e84:	f6 e0       	ldi	r31, 0x06	; 6
    1e86:	ff ab       	std	Y+55, r31	; 0x37
    1e88:	ed a9       	ldd	r30, Y+53	; 0x35
    1e8a:	fe a9       	ldd	r31, Y+54	; 0x36
    1e8c:	00 80       	ld	r0, Z
    1e8e:	8d a9       	ldd	r24, Y+53	; 0x35
    1e90:	9e a9       	ldd	r25, Y+54	; 0x36
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	9e ab       	std	Y+54, r25	; 0x36
    1e96:	8d ab       	std	Y+53, r24	; 0x35
    1e98:	eb a9       	ldd	r30, Y+51	; 0x33
    1e9a:	fc a9       	ldd	r31, Y+52	; 0x34
    1e9c:	00 82       	st	Z, r0
    1e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	9c ab       	std	Y+52, r25	; 0x34
    1ea6:	8b ab       	std	Y+51, r24	; 0x33
    1ea8:	9f a9       	ldd	r25, Y+55	; 0x37
    1eaa:	91 50       	subi	r25, 0x01	; 1
    1eac:	9f ab       	std	Y+55, r25	; 0x37
    1eae:	ef a9       	ldd	r30, Y+55	; 0x37
    1eb0:	ee 23       	and	r30, r30
    1eb2:	51 f7       	brne	.-44     	; 0x1e88 <main+0x6e>
	UART_ConfigType uart = { INTERRUPT_DISABLE, EVEN_PARITY, ONE_BIT, EIGHT_BIT,
			BAUD_RATE_9600 };
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	88 96       	adiw	r24, 0x28	; 40
    1eb8:	99 af       	std	Y+57, r25	; 0x39
    1eba:	88 af       	std	Y+56, r24	; 0x38
    1ebc:	e8 e6       	ldi	r30, 0x68	; 104
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	fb af       	std	Y+59, r31	; 0x3b
    1ec2:	ea af       	std	Y+58, r30	; 0x3a
    1ec4:	f6 e0       	ldi	r31, 0x06	; 6
    1ec6:	fc af       	std	Y+60, r31	; 0x3c
    1ec8:	ea ad       	ldd	r30, Y+58	; 0x3a
    1eca:	fb ad       	ldd	r31, Y+59	; 0x3b
    1ecc:	00 80       	ld	r0, Z
    1ece:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ed0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	9b af       	std	Y+59, r25	; 0x3b
    1ed6:	8a af       	std	Y+58, r24	; 0x3a
    1ed8:	e8 ad       	ldd	r30, Y+56	; 0x38
    1eda:	f9 ad       	ldd	r31, Y+57	; 0x39
    1edc:	00 82       	st	Z, r0
    1ede:	88 ad       	ldd	r24, Y+56	; 0x38
    1ee0:	99 ad       	ldd	r25, Y+57	; 0x39
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	99 af       	std	Y+57, r25	; 0x39
    1ee6:	88 af       	std	Y+56, r24	; 0x38
    1ee8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	9c af       	std	Y+60, r25	; 0x3c
    1eee:	ec ad       	ldd	r30, Y+60	; 0x3c
    1ef0:	ee 23       	and	r30, r30
    1ef2:	51 f7       	brne	.-44     	; 0x1ec8 <main+0xae>

	sei();
    1ef4:	78 94       	sei

	Timer1_init(&timer1);
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	82 96       	adiw	r24, 0x22	; 34
    1efa:	0e 94 3d 0a 	call	0x147a	; 0x147a <Timer1_init>
	Timer1_setCallBack(secondsCounter);
    1efe:	8f ed       	ldi	r24, 0xDF	; 223
    1f00:	90 e1       	ldi	r25, 0x10	; 16
    1f02:	0e 94 9d 0a 	call	0x153a	; 0x153a <Timer1_setCallBack>
	UART_init(&uart);
    1f06:	ce 01       	movw	r24, r28
    1f08:	88 96       	adiw	r24, 0x28	; 40
    1f0a:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_init>
	TWI_init(&twi);
    1f0e:	ce 01       	movw	r24, r28
    1f10:	4d 96       	adiw	r24, 0x1d	; 29
    1f12:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <TWI_init>
	DcMotor_Init();
    1f16:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <DcMotor_Init>
	Buzzer_init();
    1f1a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Buzzer_init>

	while (1) {
		current_operation = UART_recieveByte();
    1f1e:	0e 94 6d 08 	call	0x10da	; 0x10da <UART_recieveByte>
    1f22:	89 8b       	std	Y+17, r24	; 0x11

		if (current_operation == UART_SEND_PASS_FLAG || current_operation == UART_CONFIRM_PASS_FLAG) {
    1f24:	89 89       	ldd	r24, Y+17	; 0x11
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <main+0x116>
    1f2a:	89 89       	ldd	r24, Y+17	; 0x11
    1f2c:	85 30       	cpi	r24, 0x05	; 5
    1f2e:	a1 f4       	brne	.+40     	; 0x1f58 <main+0x13e>
			for (idx = 0; idx < 5; idx++) {
    1f30:	18 8a       	std	Y+16, r1	; 0x10
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <main+0x138>
				password[idx] = UART_recieveByte();
    1f34:	88 89       	ldd	r24, Y+16	; 0x10
    1f36:	08 2f       	mov	r16, r24
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	0e 94 6d 08 	call	0x10da	; 0x10da <UART_recieveByte>
    1f3e:	28 2f       	mov	r18, r24
    1f40:	ce 01       	movw	r24, r28
    1f42:	43 96       	adiw	r24, 0x13	; 19
    1f44:	fc 01       	movw	r30, r24
    1f46:	e0 0f       	add	r30, r16
    1f48:	f1 1f       	adc	r31, r17
    1f4a:	20 83       	st	Z, r18

	while (1) {
		current_operation = UART_recieveByte();

		if (current_operation == UART_SEND_PASS_FLAG || current_operation == UART_CONFIRM_PASS_FLAG) {
			for (idx = 0; idx < 5; idx++) {
    1f4c:	88 89       	ldd	r24, Y+16	; 0x10
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	88 8b       	std	Y+16, r24	; 0x10
    1f52:	88 89       	ldd	r24, Y+16	; 0x10
    1f54:	85 30       	cpi	r24, 0x05	; 5
    1f56:	70 f3       	brcs	.-36     	; 0x1f34 <main+0x11a>
				password[idx] = UART_recieveByte();
			}

		}

		if (current_operation == UART_SEND_PASS_FLAG) {
    1f58:	89 89       	ldd	r24, Y+17	; 0x11
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <main+0x146>
    1f5e:	49 c0       	rjmp	.+146    	; 0x1ff2 <main+0x1d8>
			for (idx = 0; idx < 5; idx++) {
    1f60:	18 8a       	std	Y+16, r1	; 0x10
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <main+0x168>
				password_confirmation[idx] = UART_recieveByte();
    1f64:	88 89       	ldd	r24, Y+16	; 0x10
    1f66:	08 2f       	mov	r16, r24
    1f68:	10 e0       	ldi	r17, 0x00	; 0
    1f6a:	0e 94 6d 08 	call	0x10da	; 0x10da <UART_recieveByte>
    1f6e:	28 2f       	mov	r18, r24
    1f70:	ce 01       	movw	r24, r28
    1f72:	48 96       	adiw	r24, 0x18	; 24
    1f74:	fc 01       	movw	r30, r24
    1f76:	e0 0f       	add	r30, r16
    1f78:	f1 1f       	adc	r31, r17
    1f7a:	20 83       	st	Z, r18
			}

		}

		if (current_operation == UART_SEND_PASS_FLAG) {
			for (idx = 0; idx < 5; idx++) {
    1f7c:	88 89       	ldd	r24, Y+16	; 0x10
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	88 8b       	std	Y+16, r24	; 0x10
    1f82:	88 89       	ldd	r24, Y+16	; 0x10
    1f84:	85 30       	cpi	r24, 0x05	; 5
    1f86:	70 f3       	brcs	.-36     	; 0x1f64 <main+0x14a>
				password_confirmation[idx] = UART_recieveByte();
			}

			error_flag = 0;
    1f88:	1f 86       	std	Y+15, r1	; 0x0f
			for (idx = 0; idx < 5; idx++) {
    1f8a:	18 8a       	std	Y+16, r1	; 0x10
    1f8c:	19 c0       	rjmp	.+50     	; 0x1fc0 <main+0x1a6>
				if (password_confirmation[idx] != password[idx])
    1f8e:	88 89       	ldd	r24, Y+16	; 0x10
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	ce 01       	movw	r24, r28
    1f96:	48 96       	adiw	r24, 0x18	; 24
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	40 81       	ld	r20, Z
    1fa0:	88 89       	ldd	r24, Y+16	; 0x10
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	43 96       	adiw	r24, 0x13	; 19
    1faa:	fc 01       	movw	r30, r24
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 17       	cp	r20, r24
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <main+0x1a0>
					error_flag = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
			for (idx = 0; idx < 5; idx++) {
				password_confirmation[idx] = UART_recieveByte();
			}

			error_flag = 0;
			for (idx = 0; idx < 5; idx++) {
    1fba:	88 89       	ldd	r24, Y+16	; 0x10
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	88 8b       	std	Y+16, r24	; 0x10
    1fc0:	88 89       	ldd	r24, Y+16	; 0x10
    1fc2:	85 30       	cpi	r24, 0x05	; 5
    1fc4:	20 f3       	brcs	.-56     	; 0x1f8e <main+0x174>
				if (password_confirmation[idx] != password[idx])
					error_flag = 1;
			}

			UART_sendByte(UART_READY);
    1fc6:	88 e0       	ldi	r24, 0x08	; 8
    1fc8:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
			if (error_flag) {
    1fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fce:	88 23       	and	r24, r24
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <main+0x1c0>
				UART_sendByte(FAILURE);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
    1fd8:	a2 cf       	rjmp	.-188    	; 0x1f1e <main+0x104>
			} else {
				UART_sendByte(SUCCESS);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
				EEPROM_writeByte(0, password);
    1fe0:	9e 01       	movw	r18, r28
    1fe2:	2d 5e       	subi	r18, 0xED	; 237
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	b9 01       	movw	r22, r18
    1fec:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <EEPROM_writeByte>
    1ff0:	96 cf       	rjmp	.-212    	; 0x1f1e <main+0x104>
			}

		} else if (current_operation == UART_CONFIRM_PASS_FLAG) {
    1ff2:	89 89       	ldd	r24, Y+17	; 0x11
    1ff4:	85 30       	cpi	r24, 0x05	; 5
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <main+0x1e0>
    1ff8:	a1 c0       	rjmp	.+322    	; 0x213c <main+0x322>

			error_flag = 0;
    1ffa:	1f 86       	std	Y+15, r1	; 0x0f
			for (idx = 0; idx < 5; idx++) {
    1ffc:	18 8a       	std	Y+16, r1	; 0x10
    1ffe:	8c c0       	rjmp	.+280    	; 0x2118 <main+0x2fe>
				EEPROM_readByte(idx, &byte);
    2000:	88 89       	ldd	r24, Y+16	; 0x10
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9e 01       	movw	r18, r28
    2008:	2e 5e       	subi	r18, 0xEE	; 238
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	b9 01       	movw	r22, r18
    200e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <EEPROM_readByte>
				if (byte != password[idx]) {
    2012:	88 89       	ldd	r24, Y+16	; 0x10
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	ce 01       	movw	r24, r28
    201a:	43 96       	adiw	r24, 0x13	; 19
    201c:	fc 01       	movw	r30, r24
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	90 81       	ld	r25, Z
    2024:	8a 89       	ldd	r24, Y+18	; 0x12
    2026:	98 17       	cp	r25, r24
    2028:	11 f0       	breq	.+4      	; 0x202e <main+0x214>
					error_flag = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	8f 87       	std	Y+15, r24	; 0x0f
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e2       	ldi	r26, 0x20	; 32
    2034:	b1 e4       	ldi	r27, 0x41	; 65
    2036:	8b 87       	std	Y+11, r24	; 0x0b
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	ad 87       	std	Y+13, r26	; 0x0d
    203c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8f 83       	std	Y+7, r24	; 0x07
    2058:	98 87       	std	Y+8, r25	; 0x08
    205a:	a9 87       	std	Y+9, r26	; 0x09
    205c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <main+0x266>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <main+0x2e4>
	else if (__tmp > 65535)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <main+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <main+0x2c6>
    20c2:	88 ec       	ldi	r24, 0xC8	; 200
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <main+0x2b4>
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <main+0x2a8>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <main+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <main+0x2f0>
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
			}

		} else if (current_operation == UART_CONFIRM_PASS_FLAG) {

			error_flag = 0;
			for (idx = 0; idx < 5; idx++) {
    2112:	88 89       	ldd	r24, Y+16	; 0x10
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	88 8b       	std	Y+16, r24	; 0x10
    2118:	88 89       	ldd	r24, Y+16	; 0x10
    211a:	85 30       	cpi	r24, 0x05	; 5
    211c:	08 f4       	brcc	.+2      	; 0x2120 <main+0x306>
    211e:	70 cf       	rjmp	.-288    	; 0x2000 <main+0x1e6>
					error_flag = 1;
				}
				_delay_ms(10);
			}

			UART_sendByte(UART_READY);
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
			if (error_flag) {
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	88 23       	and	r24, r24
    212a:	21 f0       	breq	.+8      	; 0x2134 <main+0x31a>
				UART_sendByte(FAILURE);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
    2132:	f5 ce       	rjmp	.-534    	; 0x1f1e <main+0x104>
			} else {
				UART_sendByte(SUCCESS);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_sendByte>
    213a:	f1 ce       	rjmp	.-542    	; 0x1f1e <main+0x104>
			}

		} else if (current_operation == UART_OPEN_DOOR_FLAG) {
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	86 30       	cpi	r24, 0x06	; 6
    2140:	51 f5       	brne	.+84     	; 0x2196 <main+0x37c>
			seconds = 0;
    2142:	10 92 7f 01 	sts	0x017F, r1
    2146:	10 92 7e 01 	sts	0x017E, r1

			DcMotor_Rotate(CW, 100);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	64 e6       	ldi	r22, 0x64	; 100
    214e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DcMotor_Rotate>
			while (seconds < 15);
    2152:	80 91 7e 01 	lds	r24, 0x017E
    2156:	90 91 7f 01 	lds	r25, 0x017F
    215a:	8f 30       	cpi	r24, 0x0F	; 15
    215c:	91 05       	cpc	r25, r1
    215e:	c8 f3       	brcs	.-14     	; 0x2152 <main+0x338>

			DcMotor_Rotate(STOP, 0);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DcMotor_Rotate>
			while (seconds < 18);
    2168:	80 91 7e 01 	lds	r24, 0x017E
    216c:	90 91 7f 01 	lds	r25, 0x017F
    2170:	82 31       	cpi	r24, 0x12	; 18
    2172:	91 05       	cpc	r25, r1
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <main+0x34e>

			DcMotor_Rotate(ACW, 100);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	64 e6       	ldi	r22, 0x64	; 100
    217a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DcMotor_Rotate>
			while (seconds < 33);
    217e:	80 91 7e 01 	lds	r24, 0x017E
    2182:	90 91 7f 01 	lds	r25, 0x017F
    2186:	81 32       	cpi	r24, 0x21	; 33
    2188:	91 05       	cpc	r25, r1
    218a:	c8 f3       	brcs	.-14     	; 0x217e <main+0x364>

			DcMotor_Rotate(STOP, 0);
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DcMotor_Rotate>
    2194:	c4 ce       	rjmp	.-632    	; 0x1f1e <main+0x104>
		} else if (current_operation == UART_PASS_UNMATCH) {
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	87 30       	cpi	r24, 0x07	; 7
    219a:	09 f0       	breq	.+2      	; 0x219e <main+0x384>
    219c:	c0 ce       	rjmp	.-640    	; 0x1f1e <main+0x104>
			seconds = 0;
    219e:	10 92 7f 01 	sts	0x017F, r1
    21a2:	10 92 7e 01 	sts	0x017E, r1
			Buzzer_on();
    21a6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <Buzzer_on>
			while (seconds < 60);
    21aa:	80 91 7e 01 	lds	r24, 0x017E
    21ae:	90 91 7f 01 	lds	r25, 0x017F
    21b2:	8c 33       	cpi	r24, 0x3C	; 60
    21b4:	91 05       	cpc	r25, r1
    21b6:	c8 f3       	brcs	.-14     	; 0x21aa <main+0x390>
			Buzzer_off();
    21b8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <Buzzer_off>
    21bc:	b0 ce       	rjmp	.-672    	; 0x1f1e <main+0x104>

000021be <secondsCounter>:
		}
	}
}

void secondsCounter(void) {
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    21c6:	80 91 7e 01 	lds	r24, 0x017E
    21ca:	90 91 7f 01 	lds	r25, 0x017F
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	90 93 7f 01 	sts	0x017F, r25
    21d4:	80 93 7e 01 	sts	0x017E, r24
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <__udivmodsi4>:
    21de:	a1 e2       	ldi	r26, 0x21	; 33
    21e0:	1a 2e       	mov	r1, r26
    21e2:	aa 1b       	sub	r26, r26
    21e4:	bb 1b       	sub	r27, r27
    21e6:	fd 01       	movw	r30, r26
    21e8:	0d c0       	rjmp	.+26     	; 0x2204 <__udivmodsi4_ep>

000021ea <__udivmodsi4_loop>:
    21ea:	aa 1f       	adc	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	ee 1f       	adc	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	a2 17       	cp	r26, r18
    21f4:	b3 07       	cpc	r27, r19
    21f6:	e4 07       	cpc	r30, r20
    21f8:	f5 07       	cpc	r31, r21
    21fa:	20 f0       	brcs	.+8      	; 0x2204 <__udivmodsi4_ep>
    21fc:	a2 1b       	sub	r26, r18
    21fe:	b3 0b       	sbc	r27, r19
    2200:	e4 0b       	sbc	r30, r20
    2202:	f5 0b       	sbc	r31, r21

00002204 <__udivmodsi4_ep>:
    2204:	66 1f       	adc	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	88 1f       	adc	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	1a 94       	dec	r1
    220e:	69 f7       	brne	.-38     	; 0x21ea <__udivmodsi4_loop>
    2210:	60 95       	com	r22
    2212:	70 95       	com	r23
    2214:	80 95       	com	r24
    2216:	90 95       	com	r25
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	bd 01       	movw	r22, r26
    221e:	cf 01       	movw	r24, r30
    2220:	08 95       	ret

00002222 <__prologue_saves__>:
    2222:	2f 92       	push	r2
    2224:	3f 92       	push	r3
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	ca 1b       	sub	r28, r26
    224c:	db 0b       	sbc	r29, r27
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	09 94       	ijmp

0000225a <__epilogue_restores__>:
    225a:	2a 88       	ldd	r2, Y+18	; 0x12
    225c:	39 88       	ldd	r3, Y+17	; 0x11
    225e:	48 88       	ldd	r4, Y+16	; 0x10
    2260:	5f 84       	ldd	r5, Y+15	; 0x0f
    2262:	6e 84       	ldd	r6, Y+14	; 0x0e
    2264:	7d 84       	ldd	r7, Y+13	; 0x0d
    2266:	8c 84       	ldd	r8, Y+12	; 0x0c
    2268:	9b 84       	ldd	r9, Y+11	; 0x0b
    226a:	aa 84       	ldd	r10, Y+10	; 0x0a
    226c:	b9 84       	ldd	r11, Y+9	; 0x09
    226e:	c8 84       	ldd	r12, Y+8	; 0x08
    2270:	df 80       	ldd	r13, Y+7	; 0x07
    2272:	ee 80       	ldd	r14, Y+6	; 0x06
    2274:	fd 80       	ldd	r15, Y+5	; 0x05
    2276:	0c 81       	ldd	r16, Y+4	; 0x04
    2278:	1b 81       	ldd	r17, Y+3	; 0x03
    227a:	aa 81       	ldd	r26, Y+2	; 0x02
    227c:	b9 81       	ldd	r27, Y+1	; 0x01
    227e:	ce 0f       	add	r28, r30
    2280:	d1 1d       	adc	r29, r1
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	ed 01       	movw	r28, r26
    228e:	08 95       	ret

00002290 <_exit>:
    2290:	f8 94       	cli

00002292 <__stop_program>:
    2292:	ff cf       	rjmp	.-2      	; 0x2292 <__stop_program>
